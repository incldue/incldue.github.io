{"title":"CTF-文件上传漏洞","slug":"CTF-文件上传漏洞","date":"2025-05-12T16:00:00.000Z","updated":"2025-06-12T06:25:24.986Z","comments":true,"path":"api/articles/CTF-文件上传漏洞.json","photos":[],"excerpt":"文件上传漏洞之前做了CTF的一道题，考察了文件上传，在此复习下文件上传。","covers":null,"content":"<h2 id=\"文件上传漏洞\"><a href=\"#文件上传漏洞\" class=\"headerlink\" title=\"文件上传漏洞\"></a>文件上传漏洞</h2><p>之前做了CTF的一道题，考察了文件上传，在此复习下文件上传。</p>\n<h3 id=\"文件上传漏洞原因：\"><a href=\"#文件上传漏洞原因：\" class=\"headerlink\" title=\"文件上传漏洞原因：\"></a>文件上传漏洞原因：</h3><p>1.服务器配置不当<br>2.文件上传限制被绕过<br>3.开源编辑器的上传漏洞<br>4.文件解析漏洞导致文件执行<br>5.过滤不严或被绕过</p>\n<h3 id=\"可能存在漏洞的位置：\"><a href=\"#可能存在漏洞的位置：\" class=\"headerlink\" title=\"可能存在漏洞的位置：\"></a>可能存在漏洞的位置：</h3><p>1.图片上传功能    2.头像上传功能    3.文档上传功能</p>\n<h3 id=\"文件上传检测方式：\"><a href=\"#文件上传检测方式：\" class=\"headerlink\" title=\"文件上传检测方式：\"></a>文件上传检测方式：</h3><p>1.客户端JS检测（文件扩展名）<br>2.服务端MIME类型检测（content-type内容）<br>3.服务端目录路径检测（跟path参数相关）<br>4.服务器文件扩展名检测（跟文件extension相关）<br>5.服务端文件内容检测（内容是否合法、是否含有恶意代码）</p>\n<h4 id=\"绕过客户端检测：\"><a href=\"#绕过客户端检测：\" class=\"headerlink\" title=\"绕过客户端检测：\"></a>绕过客户端检测：</h4><p>1.原理：在上传页面里含有专门检测文件上传的JS代码，最常见的则是检测文件类型和扩展名是否合法<br>2.方法：在本地浏览器客户端禁用JS即可<br>3.测试：靶场</p>\n<h4 id=\"绕过服务端检测：\"><a href=\"#绕过服务端检测：\" class=\"headerlink\" title=\"绕过服务端检测：\"></a>绕过服务端检测：</h4><p>1.服务端代码检测三点：MIME类型、文件后缀、文件内容<br>2.常见MIME类型<br>​ 1.HTML、txt、pdf<br>​ 2.Word、png、gif<br>​ 3.MPEG、AVI<br>3.绕过MIME类型检测<br>​ 1.原理：检测图片类型文件上传过程中http包的Content-Type字段的值，从而判断文件是否合法<br>​ 2.方法：用BP截取并修改数据包中文件的Content-type类型来进行绕过</p>\n<h4 id=\"绕过文件后缀检测–黑名单\"><a href=\"#绕过文件后缀检测–黑名单\" class=\"headerlink\" title=\"绕过文件后缀检测–黑名单\"></a>绕过文件后缀检测–黑名单</h4><p>1.后缀大小写绕过（.Php)<br>2.空格绕过（.php ）<br>3.点绕过（.php.）<br>4.::DATA绕过(利用Windows下NTFS文件系统的特性,可在文件后缀名加::DATA绕过<br>5.配合Apache解析漏洞（Apache解析有一个特点：解析从右向左，若为不可识别的则继续从左解析，Apache不解析.rar和.owf。）<br>6..htaccess文件<br>    1.配合名单列表绕过，上传一个自定义的.htaccess，就可绕过各种检测<br>    2…htaccess文件（分布式配置文件）提供了针对目录改变配置的方法。</p>\n<h4 id=\"绕过文件后缀检测–白名单\"><a href=\"#绕过文件后缀检测–白名单\" class=\"headerlink\" title=\"绕过文件后缀检测–白名单\"></a>绕过文件后缀检测–白名单</h4><p>1.绕过方法：服务端判断文件类型是从后往前判断，而解析则是与判断相反，可用00截断的方式绕过，%00与0x00截断<br>2.系统在对文文件名读取时，若遇到0x00,则认为读取结束。</p>\n<h4 id=\"绕过文件内容检测\"><a href=\"#绕过文件内容检测\" class=\"headerlink\" title=\"绕过文件内容检测\"></a>绕过文件内容检测</h4><p>1.通过检测文件幻数来判断：通常，通过判断文件前10个字节，即可判断文件的真实类型。<br>    1.绕过jpg类型的文件幻数检测要在文件开头写Value&#x3D;FF D8 FF E0 00 10 4A 49 46<br>    2.绕过gif类型的文件幻数检测则要加Value&#x3D;47 49 46 38 39 61<br>    3.绕过png的，则要加Value&#x3D;89 50 4E 47<br>2.通过检测文件加载：一般是调用API或函数进行文件加载测试，常见的则是图像渲染测试，那我们对渲染&#x2F;加载 测试的攻击方式时代码注入绕过，对二次渲染的则是攻击文件加载器自身。</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>我们可以用溢出攻击对文件加载器进行攻击，上传自己的恶意代码后，服务器上的文件加载器会主动进行加载测试，加载测试时被溢出攻击执行shellcode。</p>\n","categories":[{"name":"CTF相关","slug":"CTF相关","count":5,"path":"api/categories/CTF相关.json"}],"tags":[{"name":"CTF基础知识","slug":"CTF基础知识","count":4,"path":"api/tags/CTF基础知识.json"}]}