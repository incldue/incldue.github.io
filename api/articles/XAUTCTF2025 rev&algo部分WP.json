{"title":"2025 XAUTCTF新生赛 rev&algo部分WP","slug":"XAUTCTF2025 rev&algo部分WP","date":"2025-10-23T16:16:48.000Z","updated":"2025-10-23T16:27:22.706Z","comments":true,"path":"api/articles/XAUTCTF2025 rev&algo部分WP.json","photos":[],"excerpt":"今年XAUTCTF新生赛rev&algo部分WP","covers":["/images/re1.png","/images/re2.png","/images/re3.png","/images/re4.png","/images/re5.png","/images/re6.png","/images/re8.png","/images/re10.png","/images/re11.png","/images/re12.png"],"content":"<h2 id=\"algo\"><a href=\"#algo\" class=\"headerlink\" title=\"algo\"></a>algo</h2><h3 id=\"ezzz-base\"><a href=\"#ezzz-base\" class=\"headerlink\" title=\"ezzz_base\"></a>ezzz_base</h3><hr>\n<p>题目描述：欸，这个base怎么有点不一样？？</p>\n<hr>\n<p>打开附件，</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">dict</span>:&#123;<span class=\"hljs-number\">0</span>: &#x27;J&#x27;, <span class=\"hljs-number\">1</span>: &#x27;K&#x27;, <span class=\"hljs-number\">2</span>: &#x27;L&#x27;, <span class=\"hljs-number\">3</span>: &#x27;M&#x27;, <span class=\"hljs-number\">4</span>: &#x27;N&#x27;, <span class=\"hljs-number\">5</span>: &#x27;O&#x27;, <span class=\"hljs-number\">6</span>: &#x27;x&#x27;, <span class=\"hljs-number\">7</span>: &#x27;y&#x27;, <span class=\"hljs-number\">8</span>: &#x27;U&#x27;, <span class=\"hljs-number\">9</span>: &#x27;V&#x27;, <span class=\"hljs-number\">10</span>: &#x27;z&#x27;, <span class=\"hljs-number\">11</span>: &#x27;A&#x27;, <span class=\"hljs-number\">12</span>: &#x27;B&#x27;, <span class=\"hljs-number\">13</span>: &#x27;C&#x27;, <span class=\"hljs-number\">14</span>: &#x27;D&#x27;, <span class=\"hljs-number\">15</span>: &#x27;E&#x27;, <span class=\"hljs-number\">16</span>: &#x27;F&#x27;, <span class=\"hljs-number\">17</span>: &#x27;G&#x27;, <span class=\"hljs-number\">18</span>: &#x27;H&#x27;, <span class=\"hljs-number\">19</span>: &#x27;<span class=\"hljs-number\">7</span>&#x27;, <span class=\"hljs-number\">20</span>: &#x27;<span class=\"hljs-number\">8</span>&#x27;, <span class=\"hljs-number\">21</span>: &#x27;<span class=\"hljs-number\">9</span>&#x27;, <span class=\"hljs-number\">22</span>: &#x27;P&#x27;, <span class=\"hljs-number\">23</span>: &#x27;Q&#x27;, <span class=\"hljs-number\">24</span>: &#x27;I&#x27;, <span class=\"hljs-number\">25</span>: &#x27;a&#x27;, <span class=\"hljs-number\">26</span>: &#x27;b&#x27;, <span class=\"hljs-number\">27</span>: &#x27;c&#x27;, <span class=\"hljs-number\">28</span>: &#x27;d&#x27;, <span class=\"hljs-number\">29</span>: &#x27;e&#x27;, <span class=\"hljs-number\">30</span>: &#x27;f&#x27;, <span class=\"hljs-number\">31</span>: &#x27;g&#x27;, <span class=\"hljs-number\">32</span>: &#x27;h&#x27;, <span class=\"hljs-number\">33</span>: &#x27;i&#x27;, <span class=\"hljs-number\">34</span>: &#x27;j&#x27;, <span class=\"hljs-number\">35</span>: &#x27;k&#x27;, <span class=\"hljs-number\">36</span>: &#x27;l&#x27;, <span class=\"hljs-number\">37</span>: &#x27;m&#x27;, <span class=\"hljs-number\">38</span>: &#x27;W&#x27;, <span class=\"hljs-number\">39</span>: &#x27;X&#x27;, <span class=\"hljs-number\">40</span>: &#x27;Y&#x27;, <span class=\"hljs-number\">41</span>: &#x27;Z&#x27;, <span class=\"hljs-number\">42</span>: &#x27;<span class=\"hljs-number\">0</span>&#x27;, <span class=\"hljs-number\">43</span>: &#x27;<span class=\"hljs-number\">1</span>&#x27;, <span class=\"hljs-number\">44</span>: &#x27;<span class=\"hljs-number\">2</span>&#x27;, <span class=\"hljs-number\">45</span>: &#x27;<span class=\"hljs-number\">3</span>&#x27;, <span class=\"hljs-number\">46</span>: &#x27;<span class=\"hljs-number\">4</span>&#x27;, <span class=\"hljs-number\">47</span>: &#x27;<span class=\"hljs-number\">5</span>&#x27;, <span class=\"hljs-number\">48</span>: &#x27;<span class=\"hljs-number\">6</span>&#x27;, <span class=\"hljs-number\">49</span>: &#x27;R&#x27;, <span class=\"hljs-number\">50</span>: &#x27;S&#x27;, <span class=\"hljs-number\">51</span>: &#x27;T&#x27;, <span class=\"hljs-number\">52</span>: &#x27;n&#x27;, <span class=\"hljs-number\">53</span>: &#x27;o&#x27;, <span class=\"hljs-number\">54</span>: &#x27;p&#x27;, <span class=\"hljs-number\">55</span>: &#x27;q&#x27;, <span class=\"hljs-number\">56</span>: &#x27;r&#x27;, <span class=\"hljs-number\">57</span>: &#x27;s&#x27;, <span class=\"hljs-number\">58</span>: &#x27;t&#x27;, <span class=\"hljs-number\">59</span>: &#x27;u&#x27;, <span class=\"hljs-number\">60</span>: &#x27;v&#x27;, <span class=\"hljs-number\">61</span>: &#x27;w&#x27;, <span class=\"hljs-number\">62</span>: &#x27;+&#x27;, <span class=\"hljs-number\">63</span>: &#x27;/&#x27;, <span class=\"hljs-number\">64</span>: &#x27;=&#x27;&#125;<br><br><span class=\"hljs-attribute\">chipertext</span>:<br><span class=\"hljs-attribute\">PNO99NC8GX3nHMCgc8KT9x9SQTKxQpUndn9w</span><br></code></pre></td></tr></table></figure>\n\n<p>通过“&#x3D;”和64个字符，得知是base64编码的一个换表，</p>\n<p>重新换表后输入密文解码得到flag：XAUTCTF{tH3_m@sTer_0F_b4sE}</p>\n<h3 id=\"e咋不是65537？？？\"><a href=\"#e咋不是65537？？？\" class=\"headerlink\" title=\"e咋不是65537？？？\"></a>e咋不是65537？？？</h3><hr>\n<p>题目描述：完了，e不是65537，咋办呢？</p>\n<hr>\n<p>关于RSA的前置知识，建议食用<a href=\"https://xz.aliyun.com/news/16125\">关于CTF-RSA题目类型解题思路</a></p>\n<p>打开附件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> Crypto.Util.number <span class=\"hljs-keyword\">import</span> *<br>m=bytes_to_long(<span class=\"hljs-string\">b&#x27;xxxxxx&#x27;</span>)<br>p=getPrime(<span class=\"hljs-number\">256</span>)<br>q=getPrime(<span class=\"hljs-number\">256</span>)<br>e=<span class=\"hljs-number\">74</span><br>n=p*q<br>c=<span class=\"hljs-built_in\">pow</span>(m,e,n)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;p=&quot;</span>,p)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;q=&quot;</span>,q)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;c=&quot;</span>,c)<br><span class=\"hljs-comment\">#p = 86053582917386343422567174764040471033234388106968488834872953625339458483149</span><br><span class=\"hljs-comment\">#q = 72031998384560188060716696553519973198388628004850270102102972862328770104493</span><br><span class=\"hljs-comment\">#c = 331902287503397442396418773991759527842718419738370800180657653090960908650804</span><br><span class=\"hljs-comment\">#    1781233603918453326670975069669017566120311964861589659101428987255146018427</span><br><br></code></pre></td></tr></table></figure>\n\n<p>简单的RSA，但与一般的RSA不同的是e为74。</p>\n<p>e&#x3D;74&#x3D;2*37，不与phi(n)互素，得使用最大公约数(GCD)来解答，明文m0，密文c，<strong>c&#x3D;m0^e (mod n)</strong></p>\n<p>令<code>t = gcd(e,phi(n))</code>，使<code>e = t*e&#39;</code>，从而得到<code>gcd(e&#39;,phi(n))=1</code>，重新互素。</p>\n<p>计算步骤：</p>\n<ol>\n<li>计算<code>t = gcd(e,phi(n))</code></li>\n<li>令<code>e&#39; = e/t</code>，求<code>d = (e&#39;)^-1 (mod phi(n))</code></li>\n<li>最后计算<code>m = c^d mod n</code>，也就为最终的明文</li>\n</ol>\n<p>EXP：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> gmpy2<br><span class=\"hljs-keyword\">from</span> Crypto.Util.number <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\"># 当e约去公约数t后与phi(n)互素</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decrypt</span>(<span class=\"hljs-params\">p, q, e, c</span>):<br>    n = p * q<br>    phi = (p - <span class=\"hljs-number\">1</span>) * (q - <span class=\"hljs-number\">1</span>)<br>    t = gmpy2.gcd(e, phi)<br>    d = gmpy2.invert(e // t, phi)<br>    m = <span class=\"hljs-built_in\">pow</span>(c, d, n)<br>    <span class=\"hljs-built_in\">print</span>(m)<br>    msg = gmpy2.iroot(m, t)<br>    <span class=\"hljs-built_in\">print</span>(msg)<br>    <span class=\"hljs-keyword\">if</span> msg[<span class=\"hljs-number\">1</span>]:<br>        <span class=\"hljs-built_in\">print</span>(long_to_bytes(msg[<span class=\"hljs-number\">0</span>]))<br>e=<span class=\"hljs-number\">74</span><br>p= <span class=\"hljs-number\">86053582917386343422567174764040471033234388106968488834872953625339458483149</span><br>q= <span class=\"hljs-number\">72031998384560188060716696553519973198388628004850270102102972862328770104493</span><br>c= <span class=\"hljs-number\">3319022875033974423964187739917595278427184197383708001806576530909609086508041781233603918453326670975069669017566120311964861589659101428987255146018427</span><br><br>decrypt(p, q, e, c)<br><br><span class=\"hljs-comment\"># XAUTCTF&#123;e_1s_n0t_@_Prime&#125;</span><br><br></code></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"Close-Enough\"><a href=\"#Close-Enough\" class=\"headerlink\" title=\"Close Enough\"></a>Close Enough</h3><hr>\n<p>题目描述：听说 RSA 非常安全？可是如果两个质数选得“太接近”，结果会怎样呢？</p>\n<hr>\n<p>打开附件，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> Crypto.Util.number <span class=\"hljs-keyword\">import</span> getPrime, bytes_to_long, isPrime, inverse<br><br>//找到大于n的最大素数<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nextprime</span>(<span class=\"hljs-params\">n</span>):<br>    n += <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> isPrime(n):<br>        n += <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> n<br><br>flag = <span class=\"hljs-string\">&quot;&quot;</span><br>e = <span class=\"hljs-number\">65537</span><br><br>p = getPrime(<span class=\"hljs-number\">512</span>)<br>q = nextprime(p + (<span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">20</span>))<br><br>n = p * q<br>phi = (p - <span class=\"hljs-number\">1</span>) * (q - <span class=\"hljs-number\">1</span>)<br>d = inverse(e, phi)<br><br>m = bytes_to_long(<span class=\"hljs-built_in\">bytes</span>(flag, <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>))<br>c = <span class=\"hljs-built_in\">pow</span>(m, e, n)<br><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;n =&quot;</span>, n)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;c =&quot;</span>, c)<br><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">n = 123396213393166669967180741417142386608199293295343396860771048265983027294499309946576382614888097841439905355747919662299668639065387197060901118151079928153661471067906790612624750455011912757452786783406975664690965235505528837643347037179762435944987875469138529309017524600020070268892228090521628748157</span><br><span class=\"hljs-string\">c = 96164959972807254618417630680358223130932461911993510788732180904733021127322517962027522173599694137945712716717847174536035583857007099675639087774330478493529755676338936283880541666682835088571888431839407259147158612358623749706985446040831405827991266588402528874606153834653456725906949141238839683080</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>我们知道了n、c和e，通过nextprime函数和p、q的设定得知q是<code>p+2^20</code>之后的一个大素数，鉴于生成的素数都很大，所以该题中p和q相差不大。</p>\n<p>在这里，我们有两种思路：</p>\n<ol>\n<li><p><strong>费马分解</strong>：我们知道了<code>n = p*q</code>后，设：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\"><span class=\"hljs-keyword\">a</span> = (p+q)/<span class=\"hljs-number\">2</span><br>b = (q-p)/<span class=\"hljs-number\">2</span><br>得 n = (<span class=\"hljs-keyword\">a</span>+b)(<span class=\"hljs-keyword\">a</span>-b) = <span class=\"hljs-keyword\">a</span>^<span class=\"hljs-number\">2</span>-b^<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>本题，<code>p</code>和<code>q</code>接近，可以从<code>ceil(sqrt(n))</code>将n开方后尝试a，直至<code>a^2-n</code>为完全平方数</p>\n</li>\n<li><p><strong>基于偏移量的暴力搜索(逼近)</strong>：</p>\n<p>我们知道了<code>q = p +2^20</code>，则<code>n = p*q = p*(p +2^20) = p^2 + 2^20 * p</code></p>\n<p>则<code>p^2 + 2^20 * p - n</code>也就约等于<code>0</code>了，解方程式得p。</p>\n<p>知道了<code>p</code>，也就知道了<code>q</code>，之后就是RSA的常规操作了。</p>\n</li>\n</ol>\n<p>所以，我们解密该RSA的核心思路就是通过<code>p^2 + 2^20 * p - n</code>解方程得到<code>p</code>的大概值，从其前后各试多个数，从<code>是不是素数</code>、<code>q_ca = p+2^20大的下一个素数</code>、<code>p*q_ca是不是为n</code>几个方面猜测，循环直至得到找到<code>p</code>和<code>q</code>。通过数学估算+暴力逼近解密RSA。</p>\n<p>EXP：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> isqrt<br><span class=\"hljs-keyword\">from</span> Crypto.Util.number <span class=\"hljs-keyword\">import</span> isPrime, inverse, long_to_bytes<br><br>n = <span class=\"hljs-number\">123396213393166669967180741417142386608199293295343396860771048265983027294499309946576382614888097841439905355747919662299668639065387197060901118151079928153661471067906790612624750455011912757452786783406975664690965235505528837643347037179762435944987875469138529309017524600020070268892228090521628748157</span><br>c = <span class=\"hljs-number\">96164959972807254618417630680358223130932461911993510788732180904733021127322517962027522173599694137945712716717847174536035583857007099675639087774330478493529755676338936283880541666682835088571888431839407259147158612358623749706985446040831405827991266588402528874606153834653456725906949141238839683080</span><br>e = <span class=\"hljs-number\">65537</span><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nextprime</span>(<span class=\"hljs-params\">n</span>):<br>    n += <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> isPrime(n):<br>        n += <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> x<br><br>//估算p<br>delta = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">20</span><br>p_guess = (isqrt(<span class=\"hljs-number\">4</span> * n + delta * delta) - delta) // <span class=\"hljs-number\">2</span><br><br>//得到大概值后前后数猜测<br><span class=\"hljs-keyword\">for</span> diff <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(-<span class=\"hljs-number\">50000</span>, <span class=\"hljs-number\">50000</span>):<br>    p = p_guess + diff<br>    <span class=\"hljs-keyword\">if</span> p &lt;= <span class=\"hljs-number\">1</span>: <span class=\"hljs-keyword\">continue</span><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> isPrime(p): <span class=\"hljs-keyword\">continue</span><br>    q = nextprime(p + delta)<br>    <span class=\"hljs-keyword\">if</span> p * q == n:<br>        <span class=\"hljs-keyword\">break</span><br><span class=\"hljs-keyword\">else</span>:<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Failed to find p, q&quot;</span>)<br>    exit()<br><br>phi = (p - <span class=\"hljs-number\">1</span>) * (q - <span class=\"hljs-number\">1</span>)<br>d = inverse(e, phi)<br>m = <span class=\"hljs-built_in\">pow</span>(c, d, n)<br>flag = long_to_bytes(m).decode(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>, errors=<span class=\"hljs-string\">&#x27;ignore&#x27;</span>)<br><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Flag:&quot;</span>, flag)<br><br><span class=\"hljs-comment\">#flag: XAUTCTF&#123;Y0u_c@n_d0_3zzz_rs4!!!&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h2 id=\"rev\"><a href=\"#rev\" class=\"headerlink\" title=\"rev\"></a>rev</h2><h3 id=\"SignIn\"><a href=\"#SignIn\" class=\"headerlink\" title=\"SignIn\"></a>SignIn</h3><hr>\n<p>题目描述：来签个到吧！ 什么？你想直接得到flag？</p>\n<hr>\n<p>下载附件，用IDA打开，看到全是密密麻麻的函数肯定不想看下去了吧</p>\n<p>直接<code>Ctrl+F12</code>看所有的字符串，得到flag：XAUTCTF{F|rsT_5t3P_}</p>\n<h3 id=\"Welcome-to-Reverse-World\"><a href=\"#Welcome-to-Reverse-World\" class=\"headerlink\" title=\"Welcome to Reverse World\"></a>Welcome to Reverse World</h3><hr>\n<p>题目描述：XAUT网络安全小组的新实验室刚刚上线，传说每一个想要进入实验室的人，必须在入口处输入正确的口令。</p>\n<p>然而，这个口令被小组的成员编译进了一段神秘程序中。</p>\n<p>想要成为实验室的新成员，你必须通过逆向分析，找出正确的通关口令！</p>\n<p>程序已经为你准备好，快来试试吧！</p>\n<hr>\n<p>下载附件，用IDA打开，查看字符串，很遗憾，你被骗了 T_T</p>\n<p>本题有<strong>两种解法</strong>：直接用<code>strings</code>看&#x2F;将十六进制转换</p>\n<p>第一种<strong>转换</strong>：进入main函数，<img src=\"/images/re1.png\" alt=\"re1\"></p>\n<p>v6数组存储的字符串就是加密后的flag,即 <code>xmmword_2080</code>、<code>xmmword_2090</code>、<code>xmmword_20A0</code>。</p>\n<p>单击进入，得到小端序的flag十六进制字节：</p>\n<p><img src=\"/images/re2.png\" alt=\"re2\"></p>\n<p>我们把这些数值反转，再转换为ASCII字符，</p>\n<p>得到flag：XAUTCTF{W3c0me_T0_tH3_w0r1d_oF_R3verSe_3nGineErin9!!!}</p>\n<p>第二种<strong>直接strings命令</strong>：在命令行输入<code>strings welcome_rev</code>，即可得到flag。</p>\n<p><img src=\"/images/re3.png\" alt=\"re3\"></p>\n<h3 id=\"你喜欢贝斯吗\"><a href=\"#你喜欢贝斯吗\" class=\"headerlink\" title=\"你喜欢贝斯吗\"></a>你喜欢贝斯吗</h3><hr>\n<p>题目描述：听说贝斯蛮好听的，一起来听吧！</p>\n<hr>\n<p>下载附件。在IDA中打开，</p>\n<p>一样的，查看字符串，看到一串奇怪的字符串<code>WEFVVENURntTM2MwbkRfOUhhczNffQ==</code>，</p>\n<p>后面有两个<code>=</code>的一定是base64编码，一个<code>=</code>的一般是base32编码，</p>\n<p>我们放到解码模块里得到flag：XAUTCTF{S3c0nD_9Has3_}</p>\n<h3 id=\"base-revenge\"><a href=\"#base-revenge\" class=\"headerlink\" title=\"base_revenge\"></a>base_revenge</h3><hr>\n<p>题目描述：base reunion</p>\n<hr>\n<p>IDA中打开，查看main函数，代码逻辑为用<code>base58字母表加密base64表</code>，<code>然后再用解密后的base64表去加密flag</code>，得到密文。</p>\n<p>知道了逻辑，只需找到对应的字符串即可，</p>\n<p><img src=\"/images/re4.png\" alt=\"re4\"></p>\n<p>先用base58标准字母表解密base64加密表(注意，上下两个字符串都是表，base64表为64个字符)得<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code></p>\n<p>再用解密后的表解密密文得到flag：XAUTCTF{|_|nu5U@L_b@sE}</p>\n<h3 id=\"Eeeeazy\"><a href=\"#Eeeeazy\" class=\"headerlink\" title=\"Eeeeazy\"></a>Eeeeazy</h3><hr>\n<p>题目描述：can u find me??? 得到的flag用XAUTCTF{}包裹提交</p>\n<p>​\t\t   hint：涉及动态调试，可参考<a href=\"https://www.cnblogs.com/lsgxeva/p/18629167\">IDA使用技巧之动态调试</a></p>\n<hr>\n<p>IDA打开，定位<code>_main函数</code>，打开：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"> __main();<br>  <span class=\"hljs-built_in\">time</span>(&amp;Time);<br>  v5 = <span class=\"hljs-built_in\">localtime</span>(&amp;Time);<br>  <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Can you find me?\\n&quot;</span>);<br>  <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>没啥好看的，继续看可疑函数，找到了<code>_ques函数</code>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">  v3 = <span class=\"hljs-number\">2147122737</span>;<br>  v4[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">140540</span>;<br>  v4[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">-2008399303</span>;<br>  v4[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">141956</span>;<br>  v4[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">139457077</span>;<br>  v4[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">262023</span>;<br>  v4[<span class=\"hljs-number\">5</span>] = <span class=\"hljs-number\">-2008923597</span>;<br>  v4[<span class=\"hljs-number\">6</span>] = <span class=\"hljs-number\">143749</span>;<br>  v4[<span class=\"hljs-number\">7</span>] = <span class=\"hljs-number\">2118271985</span>;<br>  v4[<span class=\"hljs-number\">8</span>] = <span class=\"hljs-number\">143868</span>;<br>  <span class=\"hljs-keyword\">for</span> ( i = <span class=\"hljs-number\">0</span>; i &lt;= <span class=\"hljs-number\">4</span>; ++i )<br>  &#123;<br>    <span class=\"hljs-built_in\">memset</span>(v2, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">sizeof</span>(v2));<br>    v8 = <span class=\"hljs-number\">0</span>;<br>    v7 = <span class=\"hljs-number\">0</span>;<br>    v0 = v4[<span class=\"hljs-number\">2</span> * i];<br>    <span class=\"hljs-built_in\">LODWORD</span>(v6) = v4[<span class=\"hljs-number\">2</span> * i - <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-built_in\">HIDWORD</span>(v6) = v0;<br>    <span class=\"hljs-keyword\">while</span> ( v6 &gt; <span class=\"hljs-number\">0</span> )<br>    &#123;<br>      v2[v8++] = v6 % <span class=\"hljs-number\">2</span>;<br>      v6 /= <span class=\"hljs-number\">2LL</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> ( j = <span class=\"hljs-number\">50</span>; j &gt;= <span class=\"hljs-number\">0</span>; --j )<br>    &#123;<br>      <span class=\"hljs-keyword\">if</span> ( v2[j] )<br>      &#123;<br>        <span class=\"hljs-keyword\">if</span> ( v2[j] == <span class=\"hljs-number\">1</span> )<br>        &#123;<br>          <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-number\">42</span>);<br>          ++v7;<br>        &#125;<br>      &#125;<br>      <span class=\"hljs-keyword\">else</span><br>      &#123;<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-number\">32</span>);<br>        ++v7;<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> ( !(v7 % <span class=\"hljs-number\">5</span>) )<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-number\">32</span>);<br>    &#125;<br>    result = <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-number\">10</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>很明显是一个加密函数，你可以选择解密这一段代码，逻辑是<code>将v4数组的奇数索引的值作为低位，偶数为高位，一起组成一个64位的整数v6，以二进制位图打印出图形</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">v4 = [<span class=\"hljs-number\">140540</span>,-<span class=\"hljs-number\">2008399303</span>,<span class=\"hljs-number\">141956</span>,<span class=\"hljs-number\">139457077</span>,<span class=\"hljs-number\">262023</span>,-<span class=\"hljs-number\">2008923597</span>,<span class=\"hljs-number\">143749</span>,<span class=\"hljs-number\">2118271985</span>]<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">4</span>):<br>    n = ((v4[i*<span class=\"hljs-number\">2</span>] &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>) &lt;&lt; <span class=\"hljs-number\">32</span>) | (v4[i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>] &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>.join(<span class=\"hljs-string\">&#x27; *&#x27;</span>[((n &gt;&gt; (<span class=\"hljs-number\">49</span>-j)) &amp; <span class=\"hljs-number\">1</span>)] + <span class=\"hljs-string\">&#x27; &#x27;</span>*(j%<span class=\"hljs-number\">5</span>==<span class=\"hljs-number\">4</span>) <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">50</span>)))<br></code></pre></td></tr></table></figure>\n\n<p>运行看到flag为 HACKIT4FUN ：<img src=\"/images/re5.png\" alt=\"re5\"></p>\n<p>但本题真正考察IDA的动态调试。</p>\n<p>通过看该附件的<code>_main函数</code>汇编代码，<img src=\"/images/re6.png\" alt=\"re6\">，在<code>0x401773</code>下断点，让我们能在main函数执行完成前暂停程序；</p>\n<p>然后，再看<code>_ques函数</code>，先记下<code>_ques</code>开始的位置<code>0x401520</code>，这里汇编语言中<code>pop ebp</code>即为将<code>把基址指针寄存器弹出堆栈</code>，也就是将我们之前所说的 v6 所包含的值剥开来，呈现在命令行里。所以，我们要想在运行时得到位图，就得在<code>pop</code>这儿下断点，即<code>0x401723</code>，方便查看最终的flag。</p>\n<p>我们运行程序，来到该界面：<img src=\"/images/re8.png\" alt=\"re8\"></p>\n<p>将<code>General registers</code>里<code>0x0401773</code>修改EIP为刚刚我们记下的<code>_ques</code>开始的位置<code>0x0401520</code>，然后点击继续运行，即可得到二进制位图flag XAUTCTF{HACKIT4FUN} ：<img src=\"/images/re10.png\" alt=\"re10\"></p>\n<h3 id=\"糖衣炸弹\"><a href=\"#糖衣炸弹\" class=\"headerlink\" title=\"糖衣炸弹\"></a>糖衣炸弹</h3><hr>\n<p>题目描述：听说每一位新成员都会得到一颗SS-Team定制糖果吗？</p>\n<p>​\t\t   真的有那么善良吗？</p>\n<p>​\t\t   “不要随便吃糖，有毒咋办？”妈妈说。</p>\n<p>​\t\t  hint：U konw Packed Xanadu?(用UPX脱壳)</p>\n<hr>\n<p>下载附件，先查查有无加壳，放到Exeinfo里查壳，<img src=\"/images/re11.png\" alt=\"re11\">，得到有UPX的壳。</p>\n<p>于是，我们到upx指定目录下，运行<code>./upx -d candy.exe</code>给其脱壳(<a href=\"https://www.cnblogs.com/bonelee/p/16407794.html\">关于UPX相关介绍</a>)，</p>\n<p><img src=\"/images/re12.png\" alt=\"re12\"></p>\n<p>然后再IDA打开，定位到主函数(这里不是<code>main</code>)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">v7 = __readfsqword(<span class=\"hljs-number\">0x28u</span>);<br>  <span class=\"hljs-built_in\">sub_405450</span>(<span class=\"hljs-string\">&quot;Welcome to XAUT simple XOR crackme!&quot;</span>);<br>  <span class=\"hljs-built_in\">sub_405450</span>(<span class=\"hljs-string\">&quot;Enter the secret code to reveal the flag:&quot;</span>);<br>  <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-built_in\">sub_4050B0</span>(v6, <span class=\"hljs-number\">64LL</span>, off_4B06D8) )<br>  &#123;<br>    v6[<span class=\"hljs-built_in\">sub_401140</span>(v6, <span class=\"hljs-string\">&quot;\\r\\n&quot;</span>)] = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">if</span> ( (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">sub_401A90</span>(v6) )<br>    &#123;<br>      *(__m128i *)v5 = _mm_load_si128((<span class=\"hljs-type\">const</span> __m128i *)&amp;xmmword_48AA40);<br>      *(__m128i *)&amp;v5[<span class=\"hljs-number\">9</span>] = _mm_load_si128((<span class=\"hljs-type\">const</span> __m128i *)&amp;xmmword_48AA50);<br>      v0 = <span class=\"hljs-built_in\">sub_4108A0</span>(<span class=\"hljs-number\">26LL</span>);<br>      <span class=\"hljs-keyword\">if</span> ( v0 )<br>      &#123;<br>        <span class=\"hljs-keyword\">for</span> ( i = <span class=\"hljs-number\">0LL</span>; i != <span class=\"hljs-number\">25</span>; ++i )<br>          *(_BYTE *)(v0 + i) = v5[i] ^ <span class=\"hljs-number\">0x5A</span>;<br>        *(_BYTE *)(v0 + <span class=\"hljs-number\">25</span>) = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">sub_41BFA0</span>(<span class=\"hljs-number\">2</span>, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span>)<span class=\"hljs-string\">&quot;Good job! The flag is:\\n%s\\n&quot;</span>, v0, (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span>)v5, v1, v2, v5[<span class=\"hljs-number\">0</span>]);<br>        <span class=\"hljs-built_in\">sub_410FB0</span>(v0);<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>      <span class=\"hljs-built_in\">sub_405450</span>(<span class=\"hljs-string\">&quot;Wrong secret. Try reversing the binary!&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> ( v7 != __readfsqword(<span class=\"hljs-number\">0x28u</span>) )<br>    <span class=\"hljs-built_in\">sub_41C070</span>();<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>将<code>xmmword_48AA40</code>和<code>xmmword_48AA50</code>里的数据存入<code>v5</code>里，再进行异或操作得到密文，我们要做的是把密文异或回去 <code>明文 ^ key = 密文，即 密文 ^ key = 明文</code>，这里<code>key</code>为<strong>0x5A</strong>。</p>\n<p>最后的EXP：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">enc_flag = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">27</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">106</span>, <span class=\"hljs-number\">47</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">61</span>, <span class=\"hljs-number\">106</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">105</span>, <span class=\"hljs-number\">44</span>, <span class=\"hljs-number\">51</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">47</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">39</span>]<br>key = <span class=\"hljs-number\">0x5A</span><br><br>plain = <span class=\"hljs-string\">&#x27;&#x27;</span>.join(<span class=\"hljs-built_in\">chr</span>(i ^ key) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> enc_flag)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Decrypted flag:&quot;</span>, plain)<br><br><span class=\"hljs-comment\">#flag：XAUTCTF&#123;Y0u_g0T_3viL_uPx&#125;</span><br></code></pre></td></tr></table></figure>\n\n<!--more-->","categories":[{"name":"CTF相关","slug":"CTF相关","count":9,"path":"api/categories/CTF相关.json"}],"tags":[{"name":"比赛个人WP","slug":"比赛个人WP","count":4,"path":"api/tags/比赛个人WP.json"}]}