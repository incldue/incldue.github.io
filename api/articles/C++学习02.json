{"title":"C++学习02","slug":"C++学习02","date":"2025-06-01T16:00:00.000Z","updated":"2025-06-12T06:27:11.440Z","comments":true,"path":"api/articles/C++学习02.json","photos":[],"excerpt":"学习OOP时的一些知识点，涉及继承&多态&文件与流","covers":["/images/%E8%BF%90%E7%AE%97%E7%AC%A6.png","/images/%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B5%811.png","/images/%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B5%812.png","/images/%E6%89%93%E5%BC%80%E6%A8%A1%E5%BC%8F.png"],"content":"<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ol>\n<li><strong>继承</strong>让我们能依据另一个类来定义一个类，这种特性也很容易创建和维护一个程序，从而达到了重用代码功能和提高执行效率的一个效果。</li>\n</ol>\n<p>​\t当创建一个类时，无需重新编写新的数据成员、成员函数，只需指定该类<strong>继承一个已有类的成员即可</strong>，</p>\n<p>​\t上述已有类称为<em><strong>基类</strong></em>，新建类则为<em><strong>派生类</strong></em>。</p>\n<ol start=\"2\">\n<li><p>语法：</p>\n<p>a.基本：<em><strong>class子类(派生类) : 继承方式 父类(基类)</strong></em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span>&#123;<br>    <span class=\"hljs-keyword\">public</span>:<br>    \t<span class=\"hljs-type\">int</span> a;<br>    <span class=\"hljs-keyword\">protected</span>:<br>    \t<span class=\"hljs-type\">int</span> b;<br>    <span class=\"hljs-keyword\">private</span>:<br>    \t<span class=\"hljs-type\">int</span> c;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>b.共有继承：基类的<strong>公用成员</strong>和<strong>保护成员</strong>在派生类中保持原有访问属性，其私有成员仍为私有。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">B</span> : <span class=\"hljs-keyword\">public</span> A&#123;<br>    <span class=\"hljs-keyword\">public</span>:<br>    \t<span class=\"hljs-type\">int</span> a;<br>    <span class=\"hljs-keyword\">protected</span>:<br>    \t<span class=\"hljs-type\">int</span> b;<br>    <span class=\"hljs-comment\">//不可访问:</span><br>    \t<span class=\"hljs-type\">int</span> c;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>c.私有继承：基类的<strong>公用成员</strong>和<strong>保护成员</strong>在派生类中变为<strong>私有</strong>属性，其私有成员仍为私有。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">B</span> : <span class=\"hljs-keyword\">private</span> A&#123;<br>    <span class=\"hljs-keyword\">private</span>:<br>    \t<span class=\"hljs-type\">int</span> a;<br>    \t<span class=\"hljs-type\">int</span> b;<br>    <span class=\"hljs-comment\">//不可访问</span><br>    \t<span class=\"hljs-type\">int</span> c;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>d.保护继承：基类的<strong>公用成员</strong>和<strong>保护成员</strong>在派生类中变为<strong>保护</strong>属性，其私有成员仍为私有。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">B</span> : <span class=\"hljs-keyword\">protected</span> A&#123;<br>    <span class=\"hljs-keyword\">protected</span>:<br>    \t<span class=\"hljs-type\">int</span> a;<br>    \t<span class=\"hljs-type\">int</span> b;<br>    <span class=\"hljs-comment\">//不可访问</span><br>    \t<span class=\"hljs-type\">int</span> c;<br>&#125;;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>多继承：一个子类可有多个父类，继承多个父类的特性。</p>\n<p>语法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> &lt;派生类名&gt;:&lt;继承方式<span class=\"hljs-number\">1</span>&gt;&lt;基类<span class=\"hljs-number\">1</span>&gt;,&lt;继承方式<span class=\"hljs-number\">2</span>&gt;&lt;基类<span class=\"hljs-number\">2</span>&gt;,...<br>&#123;<br>    &lt;派生类类体&gt;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[!NOTE]</p>\n<p>访问修饰符继承方式可以是public、protected或private中的任何一个。</p>\n</blockquote>\n</li>\n<li><p>其他注意：</p>\n<p>a.派生类是不能继承基类的<strong>析构函数</strong>，也需要通过派生类的析构函数<strong>调用基类的析构函数</strong>。</p>\n<p>b.继承中先调用父类构造函数，再调用子类的，析构函数的调用顺序<strong>与之相反</strong>。</p>\n<p>c.C++中<em><strong>构造函数不能被派生类继承！</strong></em></p>\n</li>\n</ol>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ol>\n<li><p>多态指具有不同功能的函数可以用同一个函数名。</p>\n<p>这也意味在调用成员函数时<strong>会根据调用函数的对象的不同类型来执行不同函数</strong>。</p>\n<p>当类之间存在<strong>层次结构&amp;&amp;类之间通过继承关联</strong>时，会用到多态。</p>\n</li>\n<li><p><strong>静态多态</strong>：函数重载、运算符重载</p>\n<p>a.重载声明指一个与之前已在该作用域内声明过的函数&#x2F;方法<strong>具有相同名称的声明</strong>，但<strong>参数列表和定义不同。</strong></p>\n<p>b.函数重载：同名函数功能类似，但形式参数<em><strong>必须不同</strong></em>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Print</span>&#123;<br>  \t<span class=\"hljs-keyword\">public</span>:<br>    \t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m)</span> </span>&#123;<br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;整数为：&quot;</span>&lt;&lt;m&lt;&lt;endl;<br>        &#125;<br>    \t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> n)</span> </span>&#123;<br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;浮点数为：&quot;</span>&lt;&lt;n&lt;&lt;endl;<br>        &#125;<br>    \t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> chr[])</span> </span>&#123;<br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;字符串为：&quot;</span>&lt;&lt;chr&lt;&lt;endl;<br>        &#125;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    Print p;<br>    p.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-number\">5</span>);<br>    p.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-number\">3.14159</span>);<br>    <span class=\"hljs-type\">char</span> chr[]=<span class=\"hljs-string\">&quot;h3llo_w0rld&quot;</span>;<br>    p.<span class=\"hljs-built_in\">print</span>(chr);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>c.运算符重载：运算符为带有特殊名称的函数，函数名由关键字<strong>operator</strong>和<strong>运算符符号</strong>构成。同时，重载运算符也有一个<strong>返回类型</strong>与一个<strong>参数列表</strong>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//语法</span><br>Box <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-type\">const</span> Box&amp;); <span class=\"hljs-comment\">//类成员函数</span><br>Box <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-type\">const</span> Box&amp;, <span class=\"hljs-type\">const</span> Box&amp;); <span class=\"hljs-comment\">//类的非成员函数</span><br><br><span class=\"hljs-comment\">//示例</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Box</span>&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>    \t<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">getVolume</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> length * breadth * height;<br>        &#125;<br>    \t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setLength</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> len)</span> </span>&#123;<br>            length = len;<br>        &#125;<br>    \t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setBreadth</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> bre)</span> </span>&#123;<br>            breadth = bre;<br>        &#125;<br>    \t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setHeight</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> hei)</span> </span>&#123;<br>            height = hei;<br>        &#125;<br>    \t<span class=\"hljs-comment\">//重载+运算符，把两Box对象相加</span><br>    \tBox <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-type\">const</span> Box&amp; b) &#123;<br>            Box box;<br>            box.length = <span class=\"hljs-keyword\">this</span>-&gt;length + b.length;<br>            box.breadth = <span class=\"hljs-keyword\">this</span>-&gt;breadth + b.breadth;<br>            box.height = <span class=\"hljs-keyword\">this</span>-&gt;height + b.height;<br>        &#125;<br>    <span class=\"hljs-keyword\">private</span>:<br>    \t<span class=\"hljs-type\">double</span> length;<br>    \t<span class=\"hljs-type\">double</span> breadth;<br>    \t<span class=\"hljs-type\">double</span> height;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>运算符列表：<img src=\"/images/%E8%BF%90%E7%AE%97%E7%AC%A6.png\" alt=\"运算符\"></p>\n</li>\n<li><p><strong>动态多态</strong>：派生类和虚函数实现运行时多态</p>\n<p>a.<em><strong>虚函数</strong></em> 是在基类中使用关键字<strong>virtual</strong>声明的函数。在派生类中重新定义基类中的定义的虚函数时，会告诉编译器不要静态链接到基类中的该函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Shape</span>&#123;<br>  \t<span class=\"hljs-keyword\">protected</span>:<br>    \t<span class=\"hljs-type\">int</span> width, height;<br>    <span class=\"hljs-keyword\">public</span>:<br>    \t<span class=\"hljs-built_in\">Shape</span>(<span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">0</span>, <span class=\"hljs-type\">int</span> b=<span class=\"hljs-number\">0</span>) &#123;<br>            width = a;<br>            height = b;<br>        &#125;<br>    \t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            cout&lt;&lt;<span class=\"hljs-string\">&quot;Parent class area: &quot;</span>&lt;&lt;endl;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>    <br>    \t<span class=\"hljs-comment\">//纯虚函数</span><br>    \t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"文件与流\"><a href=\"#文件与流\" class=\"headerlink\" title=\"文件与流\"></a>文件与流</h2><ol>\n<li><p>**基本输入输出(I&#x2F;O)<strong>发生在</strong>流(字节序列)**中。<img src=\"/images/%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B5%811.png\" alt=\"输入输出\"></p>\n</li>\n<li><p><strong>文件操作</strong>：从文件读取流和向文件写入流。<img src=\"/images/%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B5%812.png\" alt=\"操作\"></p>\n<p>a.打开文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">open</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *filename, ios::openmode mode)</span></span>;<br><span class=\"hljs-comment\">//第一个参数指定文件名称&amp;位置，第二个参数定义文件被打开的模式</span><br></code></pre></td></tr></table></figure>\n\n<p>打开模式：<img src=\"/images/%E6%89%93%E5%BC%80%E6%A8%A1%E5%BC%8F.png\" alt=\"模式\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//以写入模式打开文件，并希望截断文件</span><br>ofstream out;<br>out.<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;file.dat&quot;</span>, ios::out | ios::trunc);<br><br><span class=\"hljs-comment\">//打开一个文件用于读写</span><br>ifstream afile;<br>afile.<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;file.dat&quot;</span>, ios::out | ios::in);<br></code></pre></td></tr></table></figure>\n\n<p>b.关闭文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">close</span><span class=\"hljs-params\">()</span></span>; <span class=\"hljs-comment\">//close()是fstream、ifstream和ofstream对象的一个成员</span><br></code></pre></td></tr></table></figure>\n\n<p>c.读取&amp;写入示例代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fstream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> data[<span class=\"hljs-number\">105</span>];<br>    <span class=\"hljs-comment\">//已写模式打开文件</span><br>    ofstream outfile;<br>    outfile.<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;afile.dat&quot;</span>);<br>    <br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;Writing...&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;Name: &quot;</span>;<br>    cin.<span class=\"hljs-built_in\">getline</span>(data, <span class=\"hljs-number\">105</span>);<br>    outfile&lt;&lt;data&lt;&lt;endl; <span class=\"hljs-comment\">//数据写入文件</span><br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;Age: &quot;</span>;<br>    cin&gt;&gt;data;<br>    cin.<span class=\"hljs-built_in\">ignore</span>(); <span class=\"hljs-comment\">//ignore()函数会忽略之前读语句留下的多余字符。</span><br>    outfile&lt;&lt;data&lt;&lt;endl;<br>    outfile.<span class=\"hljs-built_in\">close</span>();<br>    <span class=\"hljs-comment\">//以读模式打开文件</span><br>    ifstream infile;<br>    infile.<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;afile.dat&quot;</span>);<br>    <br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;Reading...&quot;</span>&lt;&lt;endl;<br>    infile&gt;&gt;data;<br>    cout&lt;&lt;data&lt;&lt;endl;<br>    infile&gt;&gt;data;<br>    cout&lt;&lt;data&lt;&lt;endl;<br>    infile.<span class=\"hljs-built_in\">close</span>();<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这个时间点的C++学习…懂得都懂 :)</p>\n","categories":[{"name":"程序设计","slug":"程序设计","count":2,"path":"api/categories/程序设计.json"}],"tags":[{"name":"编程学习","slug":"编程学习","count":2,"path":"api/tags/编程学习.json"}]}