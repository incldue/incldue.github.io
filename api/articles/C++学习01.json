{"title":"C++学习01","slug":"C++学习01","date":"2025-05-22T16:00:00.000Z","updated":"2025-06-12T06:27:11.442Z","comments":true,"path":"api/articles/C++学习01.json","photos":[],"excerpt":"学习OOP时记录的一些知识点，涉及内存模型&函数","covers":null,"content":"<h1 id=\"程序的内存模型\"><a href=\"#程序的内存模型\" class=\"headerlink\" title=\"程序的内存模型\"></a>程序的内存模型</h1><p>1.内存四区</p>\n<p>​\t代码区、全局区、栈区、堆区（代码区和全局区在程序<strong>执行前</strong>就有）</p>\n<p>2.简单介绍</p>\n<p>​\t2.1 代码区：</p>\n<p>​\t\t存放CPU执行的机器指令</p>\n<p>​\t\t代码区是<strong>共享</strong>的，也是<strong>只读</strong>的。</p>\n<p>​\t2.2 全局区：</p>\n<p>​\t\t存放了全局变量（在main函数之外）、静态变量（前面有static)</p>\n<p>​\t\t其中还包含了<strong>常量区</strong>。（包括字符串常量、const修饰的全局常量）</p>\n<p>​\t\t该区的数据在程序结束后<em><strong>由操作系统释放</strong></em>。</p>\n<p>​\t2.3 栈区：</p>\n<p>​\t\t由编译器<strong>自动分配释放</strong>（函数执行完）</p>\n<p>​\t\t存放函数的参数值（形参）、局部变量等（<strong>不要返回局部变量的地址！！</strong>）\t</p>\n<p>​\t2.4 堆区：</p>\n<p>​\t\t由程序员分配释放，若不释放，则被系统回收</p>\n<p>​\t\t主要用<strong>new关键字</strong>在该区开辟数据，用<strong>delete关键字</strong>释放内存。</p>\n<p>​\t\tnew返回的是数据类型的<strong>指针</strong>。</p>\n<p>​\t\t释放数组时（eg. delete[] arr;）</p>\n<h1 id=\"构造函数-析构函数\"><a href=\"#构造函数-析构函数\" class=\"headerlink\" title=\"构造函数&amp;析构函数\"></a>构造函数&amp;析构函数</h1><ol>\n<li><p>构造函数用于初始化对象，同时<strong>为对象的成员属性赋值</strong>；析构函数用于清理对象，同时<strong>在对象销毁前调用执行清理工作</strong>。</p>\n</li>\n<li><p>语法</p>\n<p>2.1 构造函数：<strong>类名(){}</strong></p>\n<p>​    2.1.1.构造函数，没有返回值也不写void</p>\n<p>​    2.1.2.构造函数可以有参数，可以发生重载</p>\n<p>2.2 析构函数：<strong>~类名(){}</strong></p>\n<p>​    2.2.1.析构函数，没有返回值也不写void</p>\n<p>​    2.2.2.析构函数不可以有参数，不可以发生重载</p>\n</li>\n</ol>\n<p>3.构造函数的分类&amp;调用</p>\n<p>​\t3.1 分类一（按照参数）</p>\n<p>​\t\t3.1.1.无参构造（默认构造）</p>\n<p>​\t\t3.1.2.有参构造</p>\n<p>​\t3.2 分类二（按照类型）</p>\n<p>​\t\t3.2.1.普通构造</p>\n<p>​\t\t3.2.2.拷贝构造：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">Person</span>(<span class=\"hljs-type\">const</span> Person &amp;p)&#123;<br>\t、、、<br>\t、、、<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>​\t3.3 调用</p>\n<p>​\t\t3.3.1.括号法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Person p1; <span class=\"hljs-comment\">//默认构造</span><br><span class=\"hljs-function\">Person <span class=\"hljs-title\">p2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">20</span>)</span></span>; <span class=\"hljs-comment\">//有参构造</span><br><span class=\"hljs-function\">Person <span class=\"hljs-title\">p3</span><span class=\"hljs-params\">(p2)</span></span>; <span class=\"hljs-comment\">//拷贝构造</span><br></code></pre></td></tr></table></figure>\n\n<p>​\t\t3.3.2.显示法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Person p1;<br>Person p2 = <span class=\"hljs-built_in\">Person</span>(<span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">//有参构造</span><br>Person p3 = <span class=\"hljs-built_in\">Person</span>(p2); <span class=\"hljs-comment\">//拷贝构造</span><br></code></pre></td></tr></table></figure>\n\n<p>​\t\t3.3.3.隐式转换法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Person p4 = <span class=\"hljs-number\">20</span>; <span class=\"hljs-comment\">//有参构造（相当于Person p4 = Person(20);）</span><br>Person p5 = p4; <span class=\"hljs-comment\">//拷贝构造</span><br></code></pre></td></tr></table></figure>\n\n<p>​\t3.4 深拷贝&amp;浅拷贝</p>\n<p>​\t\t3.4.1.浅拷贝：简单的赋值拷贝操作（存在的问题：使堆区的内存重复释放）</p>\n<p>​\t\t3.4.2.深拷贝：在堆区重新申请空间，从而进行拷贝操作</p>\n<p>​\t\t3.4.3.示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">Person</span>(<span class=\"hljs-type\">const</span> Person&amp; p) &#123; <span class=\"hljs-comment\">//深拷贝</span><br>\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Person的拷贝构造函数调用&quot;</span> &lt;&lt; endl;<br>\tm_Age = p.m_Age;<br>\t<span class=\"hljs-comment\">//m_Height = p.m_Height; //编译器默认实现</span><br>\tm_Height = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>(*p.m_Height);<br>&#125;<br><br>~<span class=\"hljs-built_in\">Person</span>() &#123;<br>\t<span class=\"hljs-comment\">//析构代码，将堆区所开辟的数据释放</span><br>\t<span class=\"hljs-keyword\">if</span> (m_Height != <span class=\"hljs-literal\">NULL</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">delete</span> m_Height;<br>\t\tm_Height = <span class=\"hljs-literal\">NULL</span>;<br>\t&#125;<br>\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Person的析构函数调用&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"const修饰成员函数\"><a href=\"#const修饰成员函数\" class=\"headerlink\" title=\"const修饰成员函数\"></a>const修饰成员函数</h2><p>常函数：</p>\n<p>​\t1.成员函数后加const，称之为<strong>常函数</strong></p>\n<p>​\t2.常函数内<strong>不可以</strong>修改成员属性</p>\n<p>​\t3.成员属性声明时加<strong>关键字mutable</strong>，在常函数中依然可以修改</p>\n<p>常对象：</p>\n<p>​\t1.声明对象前加const，称为<strong>常对象</strong></p>\n<p>​\t2.常对象只能调用常函数</p>\n<h3 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h3>","categories":[{"name":"程序设计","slug":"程序设计","count":2,"path":"api/categories/程序设计.json"}],"tags":[{"name":"编程学习","slug":"编程学习","count":2,"path":"api/tags/编程学习.json"}]}