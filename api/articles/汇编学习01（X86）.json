{"title":"汇编学习01","slug":"汇编学习01（X86）","date":"2025-07-17T16:00:00.000Z","updated":"2025-09-26T15:44:46.983Z","comments":true,"path":"api/articles/汇编学习01（X86）.json","photos":[],"excerpt":"学习逆向RE的前置知识，浅浅记录一下，不定时更新~","covers":["/images/%E6%B1%87%E7%BC%961.png","/images/%E6%B1%87%E7%BC%9602.png"],"content":"<h2 id=\"汇编学习01（X86）\"><a href=\"#汇编学习01（X86）\" class=\"headerlink\" title=\"汇编学习01（X86）\"></a><strong>汇编学习01（X86）</strong></h2><h3 id=\"0x01-寄存器-Registers\"><a href=\"#0x01-寄存器-Registers\" class=\"headerlink\" title=\"0x01 寄存器(Registers)\"></a>0x01 寄存器(Registers)</h3><ol>\n<li>现代的x86处理器有8个32位通用寄存器：</li>\n</ol>\n<p><img src=\"/images/%E6%B1%87%E7%BC%961.png\" alt=\"huibian1\"></p>\n<p>​\t同时，在里面<strong>EAX</strong>也被称为<em><strong>累加器</strong></em> ；<strong>ECX</strong>为 <em><strong>计数器</strong></em>，其被用为保存循环的索引（次数）。</p>\n<ol start=\"2\">\n<li>对于EAX、EBX、ECX以及EDX，它们可被分段开来使用。例如，可以把EAX的最低2位字节视为<strong>16位寄存器（AX）</strong>，也可将AX的最低位1位字节视为<strong>8位寄存器（AL）</strong>，同时AX的高位1个字节也可看成<strong>8位寄存器（AH）</strong>。当2字节大小的数据放入DX中，原本DH、DL、EDX的数据会受到相应的影响。</li>\n</ol>\n<h3 id=\"0x02-内存-寻址模式\"><a href=\"#0x02-内存-寻址模式\" class=\"headerlink\" title=\"0x02 内存&amp;寻址模式\"></a>0x02 内存&amp;寻址模式</h3><ol>\n<li><p>声明静态数据区域：</p>\n<p>a.可在内存中声明静态数据区域(类似全局变量)。<strong>.data</strong>指令用来声明数据，使得**.byte、.short、.long**可分别声明 1 、2和 4 个字节的数据。</p>\n<p>b.同时我们可以打上<strong>标签</strong>，来引用所创建的数据地址。其给内存地址命名，而<em><strong>编译器&amp;链接器</strong></em> 将其翻译成机器代码。</p>\n<p>c.例子如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">.data<br>var: <br>\t\t.byte 64 ;声明字节型变量var，所对应数据为64<br>\t\t.byte 10 ;声明数据10，无标签，内存地址为 var+1<br>\t\t<br>x:<br>\t\t.short 42 ;声明大小为2字节的数据，有标签&quot;x&quot;<br><br>y:<br>\t\t.long 3000 ;声明大小为4字节的数据，有标签&quot;y&quot;，初始\t\t 化值为3000<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>内存寻址：</p>\n<p>a.现代的x86处理器可寻址高达2^32位字节的内存(内存地址为32位宽)。</p>\n<p>b.除了支持标签引用存储区域外，x86还提供了另一种计算&amp;引用内存地址的方案：最多可将两个32位寄存器与一个32位有符号常量相加以计算存储器地址（其中一个可选择先*2、4或8）。</p>\n<p>c.用<strong>mov</strong>做例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">mov (%ebx), %eax ;从EBX中的内存地址加载4字节的数据到EAX，(%ebx)表示寄存器ebx中所存储的内容。<br><br>mov %ebx, var(,1) ;将EBX中4字节大小的数据--&gt;内存中标签为var的地方去。(var为32位常数)<br><br>mov (%esi, %ebx, 4), %edx ;将内存中标签为ESI+4*EBX所对应的4字节大小的数据--&gt;EDX中。<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>操作后缀</p>\n<p>a.当我们加载一个32位寄存器时，<strong>编译器</strong>可推断出所用内存为<strong>4个字节宽</strong>，但有时候大小并不明确。</p>\n<p>b.这时得用到<em><strong>前缀 b、w和 l</strong></em> 来分别表示<em><strong>1、2和4个字节的大小</strong></em>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">1.movb $2, (%ebx) ;将2--&gt;ebx所代表的地址单元中<br>2.movw $2, (%ebx) ;将 16 位整数2--&gt;从ebx地址单元开始的2个字节中<br>3.movl $2, (%ebx) ;将 32 位整数 2--&gt;从ebx中的值表示的地址单元 开始的4个字节中<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>指令：分为 <em><strong>数据移动指令</strong></em> 、<em><strong>逻辑运算指令</strong></em> 、<em><strong>流程控制指令</strong></em> 。</p>\n<p>使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">1.&lt;reg32 ;任意32位寄存器(%eax, %ebx, %ecx, %edx, %esi, %edi, %esp或者%eb)<br><br>2.&lt;reg16 ;任意16位寄存器(%ax, %bx, %cx 或者%dx)<br><br>3.&lt;reg8 ;任意8位寄存器(%ah, %al, %bh, %bl, %ch, %cl, %dh, %dl)<br><br>4.&lt;reg ;任意寄存器<br>5.&lt;mem ;一个内存地址,如(%eax), 4+var, (%eax, %ebx, 1)<br>6.&lt;con32 ;32位常数<br>7.&lt;con16 ;16位常数<br>8.&lt;con8 ;8位常数<br>9.&lt;con ;任意32位, 16位或者8位常数<br></code></pre></td></tr></table></figure>\n\n<p>(同时所有标签&amp;数字常量以**$**为前缀，需要时前缀 0x 表示十六进制数)</p>\n<p>a.数据移动–<strong>mov(移动)</strong>：当寄存器到寄存器之间的数据移动可行时, 直接从内存单元中将数据移动到另一内存单元中是不行的. 在这种需要在内存单元中传递数据的情况下, 它数据来源的那个内存单元必须首先把那个内存单元中的数据加载到一个寄存器中, 之后才可通过这个寄存器来把数据移动到目标内存单元中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">mov &lt;reg, &lt;reg\t\t;语法<br>mov &lt;reg, &lt;mem<br>mov &lt;mem, &lt;reg<br>mov &lt;con, &lt;reg<br>mov &lt;con, &lt;mem<br><br>mov %ebx, %eax ;将EBX中的值复制到EAX中 \t\t\t;例子   <br>mov $5, var(,1) ;将5存到字节型内存单元&quot;var&quot;<br></code></pre></td></tr></table></figure>\n\n<p>b.数据移动–<strong>push(入栈)</strong>：将其参数移动到硬件支持的<strong>栈</strong>内存顶端. 特别地, 其先将 ESP 中的值减少 4, 然后移动到一个 32 位地址单元 ( %esp ). ESP ( 栈指针 ) 会随着不断入栈持续递减, 即栈内存是从<strong>高地址单元到低地址单元增长</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">push &lt;reg32\t\t\t;语法<br>push &lt;mem<br>push &lt;con32<br><br>push %eax ;将EAX送入栈\t\t\t\t\t\t;例子<br>push var(,1) ;将var对应4字节大小数据送入栈中<br></code></pre></td></tr></table></figure>\n\n<p>c.数据移动–<strong>pop(出栈)</strong>：从硬件支持的栈内存顶端移除<strong>4字节</strong>数据, 并把其放到该指令指定的参数中 ( 寄存器&#x2F;内存单元 ). 其首先将内存中 ( %esp ) 的 4 字节数据放到指定寄存器或者内存单元中, 然后让 ESP + 4。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">pop &lt;reg32\t\t\t;语法<br>pop &lt;mem<br><br>pop %edi ;将栈顶的元素移除, 并放入到寄存器EDI中<br>pop (%ebx) ;将栈顶的元素移除, 并放入从EBX开始的4字节大小内存单元中<br><br>注意：栈的访问形式为“先进后出，后进先出”<br></code></pre></td></tr></table></figure>\n\n<p>d.数据移动–<strong>lea(加载有效地址)</strong>：将其第一个参数指定的内存单元放入到 第二个参数指定的寄存器中。注意, 该指令不加载内存单元中的内容, 只是计算有效地址并将其放入寄存器。</p>\n<p>与 mov 的区别? <code>mov</code>是传送数据(如<code>MOV AX,[1000H]</code>是将1000H作为<strong>偏移地址</strong>寻址到内存单元，将数据–&gt;AX ) ;而<code>lea</code>是取偏移地址(如<code>LEA AX,[1000H]</code>是将[1000H]的偏移地址–&gt;AX，等同于<code>MOV AX,1000H</code>)。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">lea &lt;mem, &lt;reg32<br><br>lea (%ebx,%esi,8), %edi ;EBX+8*ESI的值被移入EDI<br>lea val(,1), %eax ;val的值被移入EAX<br></code></pre></td></tr></table></figure>\n\n<p>e.逻辑运算–<strong>add(整数相加)</strong>：将两参数相加, 然后将结果存放到第二个参数中. 注意, 参数可以是寄存器,但参数中最多只有一个内存单元。</p>\n<p>   逻辑运算–<strong>sub(整数相减)</strong>：将第二个参数的值与第一个相减, 就是后面那个减去前面那个, 然后把结果存储到第二个参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">add &lt;reg, &lt;reg<br>add &lt;mem, &lt;reg<br>add &lt;reg, &lt;mem<br>add &lt;con, &lt;reg<br>add &lt;con, &lt;mem<br><br>add $10, %eax ;EAX中的值被设置为EAX+10<br>addb $10, (%eax) ;往EAX中内存单元地址加1字节数字10<br><br>sub &lt;reg, &lt;reg<br>sub &lt;mem, &lt;reg<br>sub &lt;con, &lt;reg<br>sub &lt;con, &lt;mem<br><br>sub %ah, %al ;AL被设置成AL-AH<br>sub $216, %eax ;将EAX值减216<br></code></pre></td></tr></table></figure>\n\n<p>f.逻辑运算–<strong>inc、dec(自增，自减)</strong>：分别让参数+1、-1。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">inc &lt;reg<br>inc &lt;mem<br>dec &lt;reg<br>dec &lt;mem<br><br>dec %eax ;EAX中的值-1<br>incl var(,1) ;将var所代表的32位整数+1.<br></code></pre></td></tr></table></figure>\n\n<p>g.逻辑运算–<strong>imul(整数相乘)</strong>：有两种基本格式 : 第一种是<strong>2 个参数的</strong> ( 先将两参数相乘, 然后把结果存到第二个参数中. 运算结果必须是一个寄存器 ); 第二种格式是<strong>3 个参数的</strong> ( 先将其第 1 个参数和第 2 个参数相乘, 然后把结果存到第 3 个参数中,其必须是一个寄存器。此外, 第 1 个参数必须是一个常数 ).</p>\n<p>​    逻辑运算–<strong>idiv(整数相除)</strong>：只有一个操作数，此操作数为除数，而被除数则为EDX: EAX 中的内容（一个64位整数）， 除法结果 ( 商 ) 存在于EAX 中, 而所得的余数存在 EDX 中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">imul &lt;reg32, &lt;reg32<br>imul &lt;mem, &lt;reg32<br>imul &lt;con, &lt;reg32, &lt;reg32<br>imul &lt;con, &lt;mem, &lt;reg32<br><br>imul (%ebx), %eax ;将EAX中的32位整数,与EBX中内存单元相乘, 然后把结果存到EAX中<br>imul $25, %edi, %esi ;ESI被设置为EDI*25<br><br>idiv &lt;reg32<br>idiv &lt;mem<br><br>idiv %ebx ;用EDX:EAX的值除以EBX的值.商存放在EAX中,余数存放在EDX中.<br>idivw (%ebx) ;将EDX:EAX的值除以存储在EBX所对应内存单元的32位值. 商存放在EAX中, 余数存放在EDX中<br></code></pre></td></tr></table></figure>\n\n<p>h.逻辑运算–<strong>and, or, xor(按位逻辑 与，或，非)</strong>：分别对它们的参数进行相应的逻辑运算, 运算结果存到第一个参数中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">and &lt;reg, &lt;reg<br>and &lt;mem, &lt;reg<br>and &lt;reg, &lt;mem<br>and &lt;con, &lt;reg<br>and &lt;con, &lt;mem<br>or &lt;reg, &lt;reg<br>or &lt;mem, &lt;reg<br>or &lt;reg, &lt;mem<br>or &lt;con, &lt;reg<br>or &lt;con, &lt;mem<br>xor &lt;reg, &lt;reg<br>xor &lt;mem, &lt;reg<br>xor &lt;reg, &lt;mem<br>xor &lt;con, &lt;reg<br>xor &lt;con, &lt;mem<br><br>and $0x0F, %eax ;只留下EAX中最后4位数字(二进制位)<br>xor %edx, %edx ;将EDX的值全设置成0<br></code></pre></td></tr></table></figure>\n\n<p>i.逻辑运算–<strong>not(逻辑位运算 非)</strong>：对参数进行逻辑非运算, 即翻转参数中所有位的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">not &lt;reg<br>not &lt;mem<br><br>not %eax ;将EAX所有值翻转<br></code></pre></td></tr></table></figure>\n\n<p>j.逻辑运算–<strong>shl, shr(按位左移&#x2F;右移)</strong>：对第一个参数进行位运算, 移动的位数由第二个参数决定, 移动过后的空位拿 0 补上.被移的参数最多可以被移 31 位. 第二个参数可以是 8 位常数或者寄存器 CL. 在任意情况下, 大于 31 的移位都默认是与 32 取模。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">shl &lt;con8, &lt;reg<br>shl &lt;con8, &lt;mem<br>shl %cl, &lt;reg<br>shl %cl, &lt;mem<br>shr &lt;con8, &lt;reg<br>shr &lt;con8, &lt;mem<br>shr %cl, &lt;reg<br>shr %cl, &lt;mem<br><br>shl $1, %eax ;将EAX的值*2 (如果最高有效位是0)<br>shr %cl, %ebx ;将EBX的值/2n, 其n为CL中的值, 运算最终结果存到EBX中.<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[!IMPORTANT]</p>\n<p>x86处理器有**指令指针寄存器(EIP)，为32位寄存器，用来在内存中指示输入汇编指令的位置，指向哪个内存单元。</p>\n<p>我们用<code>&lt;label</code>来当作标签，输入标签+冒号，可将其插入x86汇编代码任意位置。</p>\n</blockquote>\n<p>k.流程控制–<strong>jmp(跳转指令)</strong>：将程序跳转到参数指定的内存地址, 然后执行该内存地址的指令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">jmp &lt;label<br><br>jmp begin ;跳转到打了&quot;begin&quot;标签的位置<br></code></pre></td></tr></table></figure>\n\n<p>l.流程控制–<strong>jcondition(有条件跳转)</strong>：是条件跳转指令，基于一组条件代码的状态，这些状态存放在叫<em><strong>机器状态字</strong></em>的寄存器中，其内容包括关于最后执行的算术运算的信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">je &lt;label ;当相等的时候跳转<br>jne &lt;label ;当不相等的时候跳转<br>jz &lt;label ;当最后结果为 0 的时候跳转<br>jg &lt;label ;当大于的时候跳转<br>jge &lt;label ;当大于等于的时候跳转<br>jl &lt;label ;当小于的时候跳转<br>jle &lt;label ;当小于等于的时候跳转<br><br>cmp %ebx, %eax<br>jle done<br>;若EAX的值 &lt;= EBX的值, 就跳转到&quot;done&quot;标签,否则继续执行下一条指令<br></code></pre></td></tr></table></figure>\n\n<p>m.流程控制–<strong>cmp(比较指令)</strong>：比较两个参数的值, 适当地设置机器状态字中的条件代码. 此指令与sub指令类似，但是cmp不用将计算结果保存在操作数中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">cmp &lt;reg, &lt;reg<br>cmp &lt;mem, &lt;reg<br>cmp &lt;reg, &lt;mem<br>cmp &lt;con, &lt;reg<br><br>cmpb $10, (%ebx)<br>jeq loop<br>;若EBX的值等于整数常量10,则跳转到标签&quot;loop&quot;的位置<br></code></pre></td></tr></table></figure>\n\n<p>n.流程控制–<strong>call、ret(子程序调用&amp;返回)</strong>：实现子程序的调用和返回。<code>call</code>指令首先把当前代码位置推到内存中硬件支持的栈内存上，然后<strong>无条件</strong>跳转到标签参数指定的代码位置，在其结束后，返回调用之前的位置；<code>ret</code>指令则实现子程序的返回，其首先从栈中取出代码(类似于<code>pop</code>),然后无条件跳转到<strong>检索到的</strong>代码位置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">call &amp;lt;label<br>ret5<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>调用约定(关于如何从例程调用&amp;返回的协议)：分为两组:第一组是<strong>面向子例程的调用者的</strong>；第二组则是<strong>面向子例程的编写者，即被调用者</strong>。</p>\n<p><img src=\"/images/%E6%B1%87%E7%BC%9602.png\" alt=\"huibian2\"></p>\n<p>a.<strong>调用者约定</strong>：要调用子例程，请使用<code>call</code>指令(将返回地址存到栈上，并跳转到子程序的代码，其中子程序应遵循<strong>被调用者约定</strong>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">例子：<br>push (%ebx) ;最后一个参数最先入栈<br>push $216 ;把第二个参数入栈<br>push %eax ;第一个参数最后入栈<br>call myFunc ;调用这个函数(假设以C语言模式命名)<br>add $12, %esp ;清理栈内存<br></code></pre></td></tr></table></figure>\n\n<p>b.<strong>被调用者约定</strong>：应先将EBP的值入栈，再将ESP的值复制到EBP中(保留基指针EBP以作为栈上找到参数&amp;变量的参考点)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">例子：<br>;启动代码部分<br>.text<br>;将myFunc定义为全局(导出)函数<br>.globl myFunc<br>.type myFunc, @function<br>myFunc :<br>;子程序序言<br>push %ebp ;保存基指针旧值<br>mov %esp, %ebp ;设置基指针新值<br>sub $4, %esp ;为一个 4 字节的变量腾出位置<br>push %edi<br>push %esi ;这个函数会修改 EDI 和 ESI, 所以先给它们入栈<br>;不需要保存 EBX, EBP 和 ESP<br>;子程序主体<br>mov 8(%ebp), %eax ;把参数 1 的值移到 EAX 中<br>mov 12(%ebp), %esi ;把参数 2 的值移到 ESI 中<br>mov 16(%ebp), %edi ;把参数 3 的值移到 EDI 中<br>mov %edi, -4(%ebp) ;把 EDI 移给局部变量<br>add %esi, -4(%ebp) ;把 ESI 添加给局部变量<br>add -4(%ebp), %eax ;将局部变量的内容添加到EAX(最终结果)中<br>;子程序结尾<br>pop %esi ;恢复寄存器的值<br>pop %edi<br>mov %ebp, %esp ;释放局部变量<br>pop %ebp ;恢复调用者的基指针值<br>ret<br></code></pre></td></tr></table></figure>\n\n<p>子程序<strong>序言</strong>执行标准操作，即在EBP中保存栈指针的副本，通过递减栈指针来分配局部变量，并在栈上保存寄存器的值。</p>\n<p>函数的结尾则基本上是<strong>函数序言的镜像</strong>，从栈上恢复调用者的寄存器值，通过<strong>重置栈指针</strong>来释放局部变量，恢复调用者的EBP值，并使用<code>ret</code>指令返回调用者中相应代码位置。</p>\n</li>\n</ol>\n<!--more-->","categories":[{"name":"CTF相关","slug":"CTF相关","count":5,"path":"api/categories/CTF相关.json"}],"tags":[{"name":"CTF基础知识","slug":"CTF基础知识","count":4,"path":"api/tags/CTF基础知识.json"}]}